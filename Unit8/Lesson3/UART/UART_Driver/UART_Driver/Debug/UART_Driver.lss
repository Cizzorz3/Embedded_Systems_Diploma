
UART_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000230  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000230  000002a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e0a  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007cf  00000000  00000000  000011f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000065d  00000000  00000000  000019c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  00002020  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041e  00000000  00000000  000021b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000063f  00000000  00000000  000025d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00002c11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 cb 00 	call	0x196	; 0x196 <main>
  7a:	0c 94 16 01 	jmp	0x22c	; 0x22c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <gpio_init>:

void gpio_init(void)
{
	
	//setting PORTA as output
	DDRA = 0xff;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	8a bb       	out	0x1a, r24	; 26
	//Setting PORTB Pins 1 ,2,3 as outputs
	DDRB |= (0b111<<1);
  86:	87 b3       	in	r24, 0x17	; 23
  88:	8e 60       	ori	r24, 0x0E	; 14
  8a:	87 bb       	out	0x17, r24	; 23
  8c:	08 95       	ret

0000008e <LCD_CMD>:
}

void LCD_CMD(unsigned char cmd)
{
	//Port A = cmd
	LCD_DATA = cmd;
  8e:	8b bb       	out	0x1b, r24	; 27
	//1-Initialize reset with 0
	PORTB &= ~ (1<<LCD_RS);
  90:	88 b3       	in	r24, 0x18	; 24
  92:	8d 7f       	andi	r24, 0xFD	; 253
  94:	88 bb       	out	0x18, r24	; 24
	//2-Initialize RW with 0
	PORTB &= ~ (1<<LCD_RW);
  96:	88 b3       	in	r24, 0x18	; 24
  98:	8b 7f       	andi	r24, 0xFB	; 251
  9a:	88 bb       	out	0x18, r24	; 24
	//3-Sit the enable pin
	PORTB |= (1<<LCD_ENABLE);
  9c:	88 b3       	in	r24, 0x18	; 24
  9e:	88 60       	ori	r24, 0x08	; 8
  a0:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	83 ef       	ldi	r24, 0xF3	; 243
  a4:	91 e0       	ldi	r25, 0x01	; 1
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <LCD_CMD+0x18>
  aa:	00 c0       	rjmp	.+0      	; 0xac <LCD_CMD+0x1e>
  ac:	00 00       	nop
	_delay_ms(2);
	//4-clear the enable pin
	PORTB &= ~ (1<<LCD_ENABLE);
  ae:	88 b3       	in	r24, 0x18	; 24
  b0:	87 7f       	andi	r24, 0xF7	; 247
  b2:	88 bb       	out	0x18, r24	; 24
  b4:	08 95       	ret

000000b6 <LCD_Enable_Function>:
}

void LCD_Enable_Function(void)
{
	//Disabling the enable pin
	LCD_CTRL_PORT &=~ (1<<LCD_ENABLE);
  b6:	88 b3       	in	r24, 0x18	; 24
  b8:	87 7f       	andi	r24, 0xF7	; 247
  ba:	88 bb       	out	0x18, r24	; 24
  bc:	8f e0       	ldi	r24, 0x0F	; 15
  be:	97 e2       	ldi	r25, 0x27	; 39
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <LCD_Enable_Function+0xa>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <LCD_Enable_Function+0x10>
  c6:	00 00       	nop
	//Delay till the enable cycle time reaches 500ns
	_delay_ms(40);
	//Enabling the LCD enable pin
	LCD_CTRL_PORT |= (1<<LCD_ENABLE) ;
  c8:	88 b3       	in	r24, 0x18	; 24
  ca:	88 60       	ori	r24, 0x08	; 8
  cc:	88 bb       	out	0x18, r24	; 24
  ce:	08 95       	ret

000000d0 <is_busy>:
}

void is_busy(void)
{
	 //setting the PORT A as input
	 LCD_DATA_Dir = 0x00;
  d0:	1a ba       	out	0x1a, r1	; 26
	 //Put the LCD in read mode (RW on)
	 LCD_CTRL_PORT |= (1<<LCD_RW) ;
  d2:	88 b3       	in	r24, 0x18	; 24
  d4:	84 60       	ori	r24, 0x04	; 4
  d6:	88 bb       	out	0x18, r24	; 24
	 //put the LCD in command mode (RS off)
	 LCD_CTRL_PORT &=~ (1<<LCD_RS);
  d8:	88 b3       	in	r24, 0x18	; 24
  da:	8d 7f       	andi	r24, 0xFD	; 253
  dc:	88 bb       	out	0x18, r24	; 24
	 LCD_Enable_Function();
  de:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_Enable_Function>
	 //setting PORT A as output
	 LCD_DATA_Dir = 0xff;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	8a bb       	out	0x1a, r24	; 26
	 //Disable read mode
	 LCD_CTRL_PORT &=~ (1<<LCD_RW);
  e6:	88 b3       	in	r24, 0x18	; 24
  e8:	8b 7f       	andi	r24, 0xFB	; 251
  ea:	88 bb       	out	0x18, r24	; 24
  ec:	08 95       	ret

000000ee <LCD_init>:
}

void LCD_init(void)
{
	//checking if the LCD is busy
	is_busy();
  ee:	0e 94 68 00 	call	0xd0	; 0xd0 <is_busy>
  f2:	87 e8       	ldi	r24, 0x87	; 135
  f4:	93 e1       	ldi	r25, 0x13	; 19
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_init+0x8>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <LCD_init+0xe>
  fc:	00 00       	nop
	//wait for more than 15ms after VCC reaches 4.5V
	_delay_ms(20);
	LCD_CMD(0x0C);
  fe:	8c e0       	ldi	r24, 0x0C	; 12
 100:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_CMD>
 104:	87 e8       	ldi	r24, 0x87	; 135
 106:	93 e1       	ldi	r25, 0x13	; 19
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_init+0x1a>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCD_init+0x20>
 10e:	00 00       	nop
	_delay_ms(20);
	//Initiallize the LCD as 16*2 LCD 8 bit mode
	LCD_CMD(0x38);
 110:	88 e3       	ldi	r24, 0x38	; 56
 112:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_CMD>
 116:	89 ef       	ldi	r24, 0xF9	; 249
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <LCD_init+0x2c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <LCD_init+0x32>
 120:	00 00       	nop
	_delay_ms(1);
	//Clearing the LCD
	LCD_CMD(0x01);
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_CMD>
 128:	89 ef       	ldi	r24, 0xF9	; 249
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCD_init+0x3e>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LCD_init+0x44>
 132:	00 00       	nop
	_delay_ms(1);
	//return to home
	LCD_CMD(0x02);
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_CMD>
 13a:	89 ef       	ldi	r24, 0xF9	; 249
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <LCD_init+0x50>
 142:	00 c0       	rjmp	.+0      	; 0x144 <LCD_init+0x56>
 144:	00 00       	nop
	_delay_ms(1);
	//make increment in the cursor
	LCD_CMD(0x06);
 146:	86 e0       	ldi	r24, 0x06	; 6
 148:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_CMD>
 14c:	89 ef       	ldi	r24, 0xF9	; 249
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <LCD_init+0x62>
 154:	00 c0       	rjmp	.+0      	; 0x156 <LCD_init+0x68>
 156:	00 00       	nop
	_delay_ms(1);
	//Go to the first line
	LCD_CMD(0x80);
 158:	80 e8       	ldi	r24, 0x80	; 128
 15a:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_CMD>
 15e:	89 ef       	ldi	r24, 0xF9	; 249
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LCD_init+0x74>
 166:	00 c0       	rjmp	.+0      	; 0x168 <LCD_init+0x7a>
 168:	00 00       	nop
 16a:	08 95       	ret

0000016c <LCD_Write>:
	_delay_ms(1);
	
}

void LCD_Write(unsigned char Data)
{
 16c:	cf 93       	push	r28
 16e:	c8 2f       	mov	r28, r24
	is_busy();
 170:	0e 94 68 00 	call	0xd0	; 0xd0 <is_busy>
	//Loading the data to PortA
	LCD_DATA = Data ;
 174:	cb bb       	out	0x1b, r28	; 27
	 // Reset = 1 means that it's Data if it's zero means that it's an address
	PORTB |= (1<<LCD_RS);
 176:	88 b3       	in	r24, 0x18	; 24
 178:	82 60       	ori	r24, 0x02	; 2
 17a:	88 bb       	out	0x18, r24	; 24
	//Clearing the RW
	PORTB &=~(1<<LCD_RW);
 17c:	88 b3       	in	r24, 0x18	; 24
 17e:	8b 7f       	andi	r24, 0xFB	; 251
 180:	88 bb       	out	0x18, r24	; 24
 182:	89 ef       	ldi	r24, 0xF9	; 249
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_Write+0x1a>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCD_Write+0x20>
 18c:	00 00       	nop
	_delay_ms(1);
	LCD_Enable_Function();
 18e:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_Enable_Function>

}
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <main>:
#include "avr/delay.h"
int main(void)
{
	char x;
    /* Replace with your application code */
	gpio_init();
 196:	0e 94 41 00 	call	0x82	; 0x82 <gpio_init>
	LCD_init();
 19a:	0e 94 77 00 	call	0xee	; 0xee <LCD_init>
	uart_init();
 19e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <uart_init>
	uart_send('M');
 1a2:	8d e4       	ldi	r24, 0x4D	; 77
 1a4:	0e 94 01 01 	call	0x202	; 0x202 <uart_send>
	uart_send('o');
 1a8:	8f e6       	ldi	r24, 0x6F	; 111
 1aa:	0e 94 01 01 	call	0x202	; 0x202 <uart_send>
	uart_send('h');
 1ae:	88 e6       	ldi	r24, 0x68	; 104
 1b0:	0e 94 01 01 	call	0x202	; 0x202 <uart_send>
	uart_send('a');
 1b4:	81 e6       	ldi	r24, 0x61	; 97
 1b6:	0e 94 01 01 	call	0x202	; 0x202 <uart_send>
	uart_send('m');
 1ba:	8d e6       	ldi	r24, 0x6D	; 109
 1bc:	0e 94 01 01 	call	0x202	; 0x202 <uart_send>
	uart_send('e');
 1c0:	85 e6       	ldi	r24, 0x65	; 101
 1c2:	0e 94 01 01 	call	0x202	; 0x202 <uart_send>
	uart_send('d');
 1c6:	84 e6       	ldi	r24, 0x64	; 100
 1c8:	0e 94 01 01 	call	0x202	; 0x202 <uart_send>
	uart_send(' ');
 1cc:	80 e2       	ldi	r24, 0x20	; 32
 1ce:	0e 94 01 01 	call	0x202	; 0x202 <uart_send>
	uart_send_string("Adel#");
 1d2:	80 e6       	ldi	r24, 0x60	; 96
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 09 01 	call	0x212	; 0x212 <uart_send_string>
	//Send_string("Mohamed");
    while (1) 
    {
		LCD_Write(uart_recieve());
 1da:	0e 94 05 01 	call	0x20a	; 0x20a <uart_recieve>
 1de:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_Write>
 1e2:	fb cf       	rjmp	.-10     	; 0x1da <main+0x44>

000001e4 <uart_init>:
 */ 
#include "UART.h"
void uart_init(void)
{
	//Baud rate
	UBRRL = 51;
 1e4:	83 e3       	ldi	r24, 0x33	; 51
 1e6:	89 b9       	out	0x09, r24	; 9
	
	Clear_Bit(UCSRA,U2X);
 1e8:	8b b1       	in	r24, 0x0b	; 11
 1ea:	8d 7f       	andi	r24, 0xFD	; 253
 1ec:	8b b9       	out	0x0b, r24	; 11
	//Frame
	Sit_Bit(UCSRB,TXEN);
 1ee:	8a b1       	in	r24, 0x0a	; 10
 1f0:	88 60       	ori	r24, 0x08	; 8
 1f2:	8a b9       	out	0x0a, r24	; 10
	Clear_Bit(UCSRA,UDRE);
 1f4:	8b b1       	in	r24, 0x0b	; 11
 1f6:	8f 7d       	andi	r24, 0xDF	; 223
 1f8:	8b b9       	out	0x0b, r24	; 11
	//Enable
	Sit_Bit(UCSRB,RXEN);
 1fa:	8a b1       	in	r24, 0x0a	; 10
 1fc:	80 61       	ori	r24, 0x10	; 16
 1fe:	8a b9       	out	0x0a, r24	; 10
 200:	08 95       	ret

00000202 <uart_send>:
	
}
void uart_send(uint8_t Data)
{
	while(!Read_Bit(UCSRA,UDRE));
 202:	5d 9b       	sbis	0x0b, 5	; 11
 204:	fe cf       	rjmp	.-4      	; 0x202 <uart_send>
	UDR = Data;
 206:	8c b9       	out	0x0c, r24	; 12
 208:	08 95       	ret

0000020a <uart_recieve>:
	
}
uint8_t uart_recieve(void)
{
	while(!Read_Bit(UCSRA,RXC));
 20a:	5f 9b       	sbis	0x0b, 7	; 11
 20c:	fe cf       	rjmp	.-4      	; 0x20a <uart_recieve>
	return UDR;
 20e:	8c b1       	in	r24, 0x0c	; 12
}
 210:	08 95       	ret

00000212 <uart_send_string>:
//synchronous
void uart_send_string(uint8_t *Data )
{
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	ec 01       	movw	r28, r24
	uint8_t *p = Data;
	while(*p!='#')
 218:	03 c0       	rjmp	.+6      	; 0x220 <uart_send_string+0xe>
	{
		uart_send(*p);
 21a:	0e 94 01 01 	call	0x202	; 0x202 <uart_send>
		p++;
 21e:	21 96       	adiw	r28, 0x01	; 1
}
//synchronous
void uart_send_string(uint8_t *Data )
{
	uint8_t *p = Data;
	while(*p!='#')
 220:	88 81       	ld	r24, Y
 222:	83 32       	cpi	r24, 0x23	; 35
 224:	d1 f7       	brne	.-12     	; 0x21a <uart_send_string+0x8>
	{
		uart_send(*p);
		p++;
	}
}
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <_exit>:
 22c:	f8 94       	cli

0000022e <__stop_program>:
 22e:	ff cf       	rjmp	.-2      	; 0x22e <__stop_program>
