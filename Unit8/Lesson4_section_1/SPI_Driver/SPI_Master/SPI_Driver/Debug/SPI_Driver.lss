
SPI_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000727  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000639  00000000  00000000  000008f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000346  00000000  00000000  00000f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00001278  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a3  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c7  00000000  00000000  0000169b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001762  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


#include "SPI/SPI.h"
#include <util/delay.h>
int main(void)
{
  6c:	cf 93       	push	r28
	uint8_t c ;
	spi_master_output_init();
  6e:	0e 94 51 00 	call	0xa2	; 0xa2 <spi_master_output_init>
	DDRA = 0xff;
  72:	8f ef       	ldi	r24, 0xFF	; 255
  74:	8a bb       	out	0x1a, r24	; 26
	for(c=0;c<=55;c++)
  76:	c0 e0       	ldi	r28, 0x00	; 0
  78:	0e c0       	rjmp	.+28     	; 0x96 <main+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7a:	2f e3       	ldi	r18, 0x3F	; 63
  7c:	8d e0       	ldi	r24, 0x0D	; 13
  7e:	93 e0       	ldi	r25, 0x03	; 3
  80:	21 50       	subi	r18, 0x01	; 1
  82:	80 40       	sbci	r24, 0x00	; 0
  84:	90 40       	sbci	r25, 0x00	; 0
  86:	e1 f7       	brne	.-8      	; 0x80 <main+0x14>
  88:	00 c0       	rjmp	.+0      	; 0x8a <main+0x1e>
  8a:	00 00       	nop
	{
		_delay_ms(1000);
		PORTA = spi_master_send_char(c);
  8c:	8c 2f       	mov	r24, r28
  8e:	0e 94 56 00 	call	0xac	; 0xac <spi_master_send_char>
  92:	8b bb       	out	0x1b, r24	; 27
int main(void)
{
	uint8_t c ;
	spi_master_output_init();
	DDRA = 0xff;
	for(c=0;c<=55;c++)
  94:	cf 5f       	subi	r28, 0xFF	; 255
  96:	c8 33       	cpi	r28, 0x38	; 56
  98:	80 f3       	brcs	.-32     	; 0x7a <main+0xe>
	{
		_delay_ms(1000);
		PORTA = spi_master_send_char(c);
	}

}
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	cf 91       	pop	r28
  a0:	08 95       	ret

000000a2 <spi_master_output_init>:
	DDRB |= (1<<MISO) ;
}

void spi_master_output_init(void)
{
	SPCR = (1<<SPR0) | (1<<MSTR) | (1<<SPE) ;
  a2:	81 e5       	ldi	r24, 0x51	; 81
  a4:	8d b9       	out	0x0d, r24	; 13
	DDRB = (1<<SS) | (1<<MOSI) | (1<<SCK);
  a6:	80 eb       	ldi	r24, 0xB0	; 176
  a8:	87 bb       	out	0x17, r24	; 23
  aa:	08 95       	ret

000000ac <spi_master_send_char>:
}

uint8_t spi_master_send_char(uint8_t Data)
{
	SPDR = Data;
  ac:	8f b9       	out	0x0f, r24	; 15
	while(!SPSR & (1<<SPIF));
  ae:	8e b1       	in	r24, 0x0e	; 14
	return SPDR;
  b0:	8f b1       	in	r24, 0x0f	; 15

}
  b2:	08 95       	ret

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
