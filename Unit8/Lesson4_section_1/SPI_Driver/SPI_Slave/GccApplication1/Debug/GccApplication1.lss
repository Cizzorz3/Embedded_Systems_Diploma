
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000102  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000065d  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d5  00000000  00000000  000007fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026f  00000000  00000000  00000dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001044  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000350  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000087  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000145f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 41 00 	call	0x82	; 0x82 <main>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <spi_slave_output_init>:
void spi_slave_output_init(void);
uint8_t spi_master_send_char(uint8_t Data);
uint8_t spi_slave_recieve_char(uint8_t Data);
void spi_slave_output_init(void)
{
	SPCR |= (1<<SPE) ;
  6c:	8d b1       	in	r24, 0x0d	; 13
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	8d b9       	out	0x0d, r24	; 13
	DDRB |= (1<<MISO) ;
  72:	87 b3       	in	r24, 0x17	; 23
  74:	80 64       	ori	r24, 0x40	; 64
  76:	87 bb       	out	0x17, r24	; 23
  78:	08 95       	ret

0000007a <spi_slave_recieve_char>:
}
uint8_t spi_slave_recieve_char(uint8_t Data)
{
	
	SPDR = Data;
  7a:	8f b9       	out	0x0f, r24	; 15
	while(!SPSR & (1<<SPIF));
  7c:	8e b1       	in	r24, 0x0e	; 14
	return SPDR;
  7e:	8f b1       	in	r24, 0x0f	; 15
}
  80:	08 95       	ret

00000082 <main>:

int main(void)
{
		uint8_t c ;
		spi_slave_output_init();
  82:	0e 94 36 00 	call	0x6c	; 0x6c <spi_slave_output_init>
		DDRA = 0xff;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	8a bb       	out	0x1a, r24	; 26
		for(c=255;c>=0;c--)
  8a:	cf ef       	ldi	r28, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	2f e3       	ldi	r18, 0x3F	; 63
  8e:	8d e0       	ldi	r24, 0x0D	; 13
  90:	93 e0       	ldi	r25, 0x03	; 3
  92:	21 50       	subi	r18, 0x01	; 1
  94:	80 40       	sbci	r24, 0x00	; 0
  96:	90 40       	sbci	r25, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <main+0x10>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x1a>
  9c:	00 00       	nop
		{
			_delay_ms(1000);
			PORTA = spi_slave_recieve_char(c);
  9e:	8c 2f       	mov	r24, r28
  a0:	0e 94 3d 00 	call	0x7a	; 0x7a <spi_slave_recieve_char>
  a4:	8b bb       	out	0x1b, r24	; 27
int main(void)
{
		uint8_t c ;
		spi_slave_output_init();
		DDRA = 0xff;
		for(c=255;c>=0;c--)
  a6:	c1 50       	subi	r28, 0x01	; 1
  a8:	f1 cf       	rjmp	.-30     	; 0x8c <main+0xa>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
