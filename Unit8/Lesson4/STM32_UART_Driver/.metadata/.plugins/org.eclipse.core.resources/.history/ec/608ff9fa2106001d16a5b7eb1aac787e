#include "STM32_F103_C6_USART.h"


UART_config* Global_UART_Config;



/**================================================================
 * @Fn				- MCAL_GPIO_init
 * @brief 			- Initializes the GPIOx  peripheral according to the PinConfig
 * @param [in] 		- GPIOx : to select the GPIO peripheral
 * @param [in]		- PinConfig : to select the pin configuration
 * @retval 			- None
 * Note				- STM32F103C6 MCU  has GPIO A,B,C,D,E
 * 					- But package LQF48 has only GPIO A,B and part of C/D
 */
void MCAL_UART_Init(USART_typedef * Usartx , UART_config * UART_config)
{
	Global_UART_Config = UART_config ;
	uint32_t PCLK,BRR;
	if(Usartx == USART1)
		RCC_USART1_CLK_EN();
	else if (Usartx == USART2)
		RCC_USART2_CLK_EN();
	else if (Usartx == USART3)
		RCC_USART3_CLK_EN();


	Usartx->CR1 |= 1<<13;
	Usartx->CR1 |= UART_config->USART_Mode;
	Usartx->CR1 |= UART_config->Parity;
	Usartx->CR1 |= UART_config->Payload_length;
	Usartx->CR2 |= UART_config->stop_bits;
	Usartx->CR3 |= UART_config->HW_flow_control;


	if(Usartx == USART1)
		PCLK = MCAL_RCC_GetPCLK2_Freq();
	else
		PCLK = MCAL_RCC_GetPCLK1_Freq();

	BRR = UART_BRR_Register(PCLK,UART_config->BaudRate);
	Usartx->BRR = BRR;

	//IRQ enable
	if(UART_config->IRQ_Enable != UART_IRQ_Enable_None)
	{
		Usartx->CR1 |= (UART_config->IRQ_Enable);

		if(Usartx==USART1)
			NVIC_IRQ37_USART_Enable;
		else if (Usartx==USART2)
			NVIC_IRQ38_USART_Enable;
		else if (Usartx==USART3)
			NVIC_IRQ39_USART_Enable;
	}

}
/**================================================================
 * @Fn				- MCAL_GPIO_init
 * @brief 			- Initializes the GPIOx  peripheral according to the PinConfig
 * @param [in] 		- GPIOx : to select the GPIO peripheral
 * @param [in]		- PinConfig : to select the pin configuration
 * @retval 			- None
 * Note				- STM32F103C6 MCU  has GPIO A,B,C,D,E
 * 					- But package LQF48 has only GPIO A,B and part of C/D
 */
void MCAL_UART_Denit(USART_typedef * Usartx)
{
	if(Usartx==USART1)
	{
		RCC_USART1_CLK_Reset();
		NVIC_IRQ37_USART_Disable;
	}
	else if (Usartx==USART2){
		RCC_USART2_CLK_Reset();
		NVIC_IRQ38_USART_Disable;
	}
	else if (Usartx==USART3)
	{
		RCC_USART3_CLK_Reset();
		NVIC_IRQ39_USART_Disable;

	}

}
void MCAL_UART_Set_GPIO_Pins(USART_typedef * Usartx)
{
	GPIO_Pinconfig_t pincfg ;

	if (Usartx == USART1)
		{

			// PA9 TX
			// PA10 RX
			// PA11 CTS
			// PA12 RTS

			// PA9 TX
			pincfg.GPIO_Pin_Number = GPIO_PIN_9;
			pincfg.GPIO_Pin_Mode = GPIO_AF_output_Push_pull_Mode;
			pincfg.GPIO_Pin_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOA, &pincfg);

			// PA10 RX
			pincfg.GPIO_Pin_Number = GPIO_PIN_10;
			pincfg.GPIO_Pin_Mode = GPIO_AF_input_Mode;
			MCAL_GPIO_Init(GPIOA, &pincfg);

			if (Global_UART_Config->HW_flow_control == HW_flwctl_RTS || Global_UART_Config->HW_flow_control == HW_flwctl_CTS_RTS)
			{
				// PA11 CTS
				pincfg.GPIO_Pin_Number = GPIO_PIN_11;
				pincfg.GPIO_Pin_Mode = GPIO_Floating_input_Mode;
				MCAL_GPIO_Init(GPIOA, &pincfg);

			}

			if (Global_UART_Config->HW_flow_control == HW_flwctl_RTS || Global_UART_Config->HW_flow_control == HW_flwctl_CTS_RTS)
			{
				// PA12 RTS
				pincfg.GPIO_Pin_Number = GPIO_PIN_12;
				pincfg.GPIO_Pin_Mode = GPIO_AF_input_Mode;
				pincfg.GPIO_Pin_Speed = GPIO_SPEED_10M;
				MCAL_GPIO_Init(GPIOA, &pincfg);

			}


		}



		if (Usartx == USART2)
		{

			// PA2 TX
			// PA3 RX
			// PA0 CTS
			// PA1 RTS

			// PA2 TX
			pincfg.GPIO_Pin_Number = GPIO_PIN_2;
			pincfg.GPIO_Pin_Mode = GPIO_AF_output_Push_pull_Mode;
			pincfg.GPIO_Pin_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOA, &pincfg);

			// PA3 RX
			pincfg.GPIO_Pin_Number = GPIO_PIN_3;
			pincfg.GPIO_Pin_Mode = GPIO_AF_input_Mode;
			MCAL_GPIO_Init(GPIOA, &pincfg);

			if (Global_UART_Config->HW_flow_control == HW_flwctl_CTS || Global_UART_Config->HW_flow_control == HW_flwctl_CTS_RTS)
			{
				// PA0 CTS
				pincfg.GPIO_Pin_Number = GPIO_PIN_0;
				pincfg.GPIO_Pin_Mode = GPIO_Floating_input_Mode;
				MCAL_GPIO_Init(GPIOA, &pincfg);

			}

			if (Global_UART_Config->HW_flow_control == UART_HW_flow_control_RTS || Global_UART_Config->HW_flow_control == UART_HW_flow_control_RTS_CTS)
			{
				// PA1 RTS
				pincfg.GPIO_Pin_Number = GPIO_PIN_1;
				pincfg.GPIO_Pin_Mode = GPIO_AF_output_Push_pull_Mode;
				pincfg.GPIO_Pin_Speed = GPIO_SPEED_10M;
				MCAL_GPIO_Init(GPIOA, &pincfg);
			}


		}




		if (USARTx == USART3)
		{

			// PB10 TX
			// PB11 RX
			// PB13 CTS
			// PB14 RTS

			// PB10 TX
			pincfg.GPIO_Pin_Number = GPIO_PIN_10;
			pincfg.GPIO_Pin_Mode = GPIO_AF_output_Push_pull_Mode;
			pincfg.GPIO_Pin_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &pincfg);

			// PB11 RX
			pincfg.GPIO_Pin_Number = GPIO_PIN_11;
			pincfg.GPIO_Pin_Mode = GPIO_Pin_Mode_AF_INPUT;
			MCAL_GPIO_Init(GPIOB, &pincfg);

			if (Global_UART_Config->HW_flow_control == UART_HW_flow_control_CTS || Global_UART_Config->HW_flow_control == UART_HW_flow_control_RTS_CTS)
			{
				// PB13 CTS
				pincfg.GPIO_Pin_Number = GPIO_PIN_13;
				pincfg.GPIO_Pin_Mode = GPIO_Pin_Mode_INPUT_FLO;
				MCAL_GPIO_Init(GPIOB, &pincfg);

			}

			if (Global_UART_Config->HW_flow_control == UART_HW_flow_control_RTS || Global_UART_Config->HW_flow_control == UART_HW_flow_control_RTS_CTS)
			{
				// PB14 RTS
				pincfg.GPIO_Pin_Number = GPIO_PIN_14;
				pincfg.GPIO_Pin_Mode = GPIO_AF_output_Push_pull_Mode;
				pincfg.GPIO_Pin_Speed = GPIO_SPEED_10M;
				MCAL_GPIO_Init(GPIOB, &pincfg);

			}


		}
}
/**================================================================
 * @Fn				- MCAL_GPIO_init
 * @brief 			- Initializes the GPIOx  peripheral according to the PinConfig
 * @param [in] 		- GPIOx : to select the GPIO peripheral
 * @param [in]		- PinConfig : to select the pin configuration
 * @retval 			- None
 * Note				- STM32F103C6 MCU  has GPIO A,B,C,D,E
 * 					- But package LQF48 has only GPIO A,B and part of C/D
 */
void MCAL_UART_Send_Data(USART_typedef * Usartx , uint16_t * ptxbuffer , enum Polling_mechanism Polling_en)

{
	if(Polling_en==enable)
		while(!Usartx->SR & 1<<7);


	if(Global_UART_Config->Payload_length == Payload_length_9)
	{
		//9 bit data
		Usartx->DR = (*ptxbuffer & (uint16_t)0x01ff);
	}
	else
	{
		//8 Bit data
		Usartx->DR = (*ptxbuffer & (uint8_t)0x0ff);

	}
}
void MCAL_UART_Recieve_Data(USART_typedef * Usartx , uint16_t * prxbuffer , enum Polling_mechanism Polling_en)
{
	if(Polling_en==enable)
	{
		while(!(Usartx->SR & 1<<5));
	}

	if(Global_UART_Config->Payload_length == Payload_length_9)
	{
		if(Global_UART_Config->Parity == UART_Parity_None)
		{
			*((uint16_t*)prxbuffer) = (Usartx->DR & (uint8_t)0xff);
		}
		else
		{
			*((uint16_t*)prxbuffer) = (Usartx->DR & (uint8_t)0x7f);
		}
	}

}

