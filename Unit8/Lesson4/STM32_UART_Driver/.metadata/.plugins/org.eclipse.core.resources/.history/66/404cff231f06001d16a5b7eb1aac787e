#include "STM32_F103_C6_RCC.h"

//Set and cleared by software to control the division factor of the APB Low speed clock (PCLK1).
/*
/0xx: HCLK not divided
100: HCLK divided by 2
101: HCLK divided by 4
110: HCLK divided by 8
111: HCLK divided by 16
*/

const uint8_t APB_Prescaler_table[8] = {0,0,0,0,1,2,3,4};


/*
 * Set and cleared by software to control AHB clock division factor.
0xxx: SYSCLK not divided
1000: SYSCLK divided by 2
1001: SYSCLK divided by 4
1010: SYSCLK divided by 8
1011: SYSCLK divided by 16
1100: SYSCLK divided by 64
1101: SYSCLK divided by 128
1110: SYSCLK divided by 256
1111: SYSCLK divided by 512
*/
const uint8_t AHB_Prescaler_table[16] = {0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9};

uint32_t MCAL_RCC_GetSysCLK_Freq(void)
{
	//Set and cleared by hardware to indicate which clock source is used as system clock.
	/*
	00: HSI oscillator used as system clock
	01: HSE oscillator used as system clock
	10: PLL used as system clock
	11: Not applicable
	*/
	switch((RCC->CFGR>>2) &  0b11)
	{
	case 0 :
		return HSI_RC_CLk;
		break;
	case 1 :
		return HSE_clk;
		break;
	case 2 :
		return 16000000;
		break;
	}
}
uint32_t MCAL_RCC_GetHCLK_Freq(void)
{
	return (MCAL_RCC_GetSysCLK_Freq() >> APB_Prescaler_table[(RCC->CFGR >> 11 )&0b111]);

}
uint32_t MCAL_RCC_GetPCLK1_Freq(void)
{
	//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
	return (MCAL_RCC_GetHCLK_Freq() >> APB_Prescaler_table[(RCC->CFGR >> 8 )&0b111]);
}
uint32_t MCAL_RCC_GetPCLK2_Freq(void)
{
	//Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GetHCLK_Freq() >> APB_Prescaler_table[(RCC->CFGR >> 11 )&0b111]);

}
