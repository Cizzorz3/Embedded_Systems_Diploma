
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000900  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000a30  08000a30  00010a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a38  08000a38  00010a40  2**0
                  CONTENTS
  4 .ARM          00000000  08000a38  08000a38  00010a40  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a38  08000a40  00010a40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a38  08000a38  00010a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a3c  08000a3c  00010a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08000a40  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000a40  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010a40  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004059  00000000  00000000  00010a69  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a17  00000000  00000000  00014ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009f8  00000000  00000000  000154d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001c8  00000000  00000000  00015ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000170  00000000  00000000  000160a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000b50  00000000  00000000  00016210  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000027a0  00000000  00000000  00016d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009fa8  00000000  00000000  00019500  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000234a8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000568  00000000  00000000  00023524  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a18 	.word	0x08000a18

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000a18 	.word	0x08000a18

08000170 <EXTI0_IRQHandler>:

//================================================================================
//						ISR Functions
//================================================================================
void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//clear by writing 1 to pending register
	EXTI->PR |= 1<<0;
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]

	//call IRQ
	GP_IRQ_CallBack[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	20000020 	.word	0x20000020

08000194 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	//clear by writing 1 to pending register
	EXTI->PR |= 1<<0;
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0301 	orr.w	r3, r3, #1
 80001a2:	6153      	str	r3, [r2, #20]

	//call IRQ
	GP_IRQ_CallBack[0]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	20000020 	.word	0x20000020

080001b8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	//clear by writing 1 to pending register
	EXTI->PR |= 1<<1;
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0302 	orr.w	r3, r3, #2
 80001c6:	6153      	str	r3, [r2, #20]

	//call IRQ
	GP_IRQ_CallBack[1]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	685b      	ldr	r3, [r3, #4]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	20000020 	.word	0x20000020

080001dc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	//clear by writing 1 to pending register
	EXTI->PR |= 1<<2;
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0304 	orr.w	r3, r3, #4
 80001ea:	6153      	str	r3, [r2, #20]

	//call IRQ
	GP_IRQ_CallBack[2]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	689b      	ldr	r3, [r3, #8]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	20000020 	.word	0x20000020

08000200 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	//clear by writing 1 to pending register
	EXTI->PR |= 1<<3;
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0308 	orr.w	r3, r3, #8
 800020e:	6153      	str	r3, [r2, #20]

	//call IRQ
	GP_IRQ_CallBack[3]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	68db      	ldr	r3, [r3, #12]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	20000020 	.word	0x20000020

08000224 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5) {EXTI->PR |= (1<<5) ; GP_IRQ_CallBack[5]();}
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if (EXTI->PR & 1<<6) {EXTI->PR |= (1<<6) ; GP_IRQ_CallBack[6]();}
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if (EXTI->PR & 1<<7) {EXTI->PR |= (1<<7) ; GP_IRQ_CallBack[7]();}
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if (EXTI->PR & 1<<8) {EXTI->PR |= (1<<8) ; GP_IRQ_CallBack[8]();}
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if (EXTI->PR & 1<<9) {EXTI->PR |= (1<<9) ; GP_IRQ_CallBack[9]();}
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000020 	.word	0x20000020

080002cc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10) {EXTI->PR |= (1<<10) ; GP_IRQ_CallBack[10]();}
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if (EXTI->PR & 1<<11) {EXTI->PR |= (1<<11) ; GP_IRQ_CallBack[11]();}
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if (EXTI->PR & 1<<12) {EXTI->PR |= (1<<12) ; GP_IRQ_CallBack[12]();}
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if (EXTI->PR & 1<<13) {EXTI->PR |= (1<<13) ; GP_IRQ_CallBack[13]();}
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if (EXTI->PR & 1<<14) {EXTI->PR |= (1<<14) ; GP_IRQ_CallBack[14]();}
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if (EXTI->PR & 1<<15) {EXTI->PR |= (1<<15) ; GP_IRQ_CallBack[15]();}
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3

}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	20000020 	.word	0x20000020

08000390 <Get_CRLH_Position>:
//Includes

#include "STM_F103C6_GPIO_Driver.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b80      	cmp	r3, #128	; 0x80
 800039e:	d042      	beq.n	8000426 <Get_CRLH_Position+0x96>
 80003a0:	2b80      	cmp	r3, #128	; 0x80
 80003a2:	dc11      	bgt.n	80003c8 <Get_CRLH_Position+0x38>
 80003a4:	2b08      	cmp	r3, #8
 80003a6:	d036      	beq.n	8000416 <Get_CRLH_Position+0x86>
 80003a8:	2b08      	cmp	r3, #8
 80003aa:	dc06      	bgt.n	80003ba <Get_CRLH_Position+0x2a>
 80003ac:	2b02      	cmp	r3, #2
 80003ae:	d02e      	beq.n	800040e <Get_CRLH_Position+0x7e>
 80003b0:	2b04      	cmp	r3, #4
 80003b2:	d02e      	beq.n	8000412 <Get_CRLH_Position+0x82>
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d028      	beq.n	800040a <Get_CRLH_Position+0x7a>
		break;
	case GPIO_PIN_15 :
		return 28;
		break;
	default :
		break ;
 80003b8:	e047      	b.n	800044a <Get_CRLH_Position+0xba>
	switch(PinNumber)
 80003ba:	2b20      	cmp	r3, #32
 80003bc:	d02f      	beq.n	800041e <Get_CRLH_Position+0x8e>
 80003be:	2b40      	cmp	r3, #64	; 0x40
 80003c0:	d02f      	beq.n	8000422 <Get_CRLH_Position+0x92>
 80003c2:	2b10      	cmp	r3, #16
 80003c4:	d029      	beq.n	800041a <Get_CRLH_Position+0x8a>
		break ;
 80003c6:	e040      	b.n	800044a <Get_CRLH_Position+0xba>
	switch(PinNumber)
 80003c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003cc:	d033      	beq.n	8000436 <Get_CRLH_Position+0xa6>
 80003ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003d2:	dc09      	bgt.n	80003e8 <Get_CRLH_Position+0x58>
 80003d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003d8:	d029      	beq.n	800042e <Get_CRLH_Position+0x9e>
 80003da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003de:	d028      	beq.n	8000432 <Get_CRLH_Position+0xa2>
 80003e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003e4:	d021      	beq.n	800042a <Get_CRLH_Position+0x9a>
		break ;
 80003e6:	e030      	b.n	800044a <Get_CRLH_Position+0xba>
	switch(PinNumber)
 80003e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003ec:	d027      	beq.n	800043e <Get_CRLH_Position+0xae>
 80003ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003f2:	dc03      	bgt.n	80003fc <Get_CRLH_Position+0x6c>
 80003f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003f8:	d01f      	beq.n	800043a <Get_CRLH_Position+0xaa>
		break ;
 80003fa:	e026      	b.n	800044a <Get_CRLH_Position+0xba>
	switch(PinNumber)
 80003fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000400:	d01f      	beq.n	8000442 <Get_CRLH_Position+0xb2>
 8000402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000406:	d01e      	beq.n	8000446 <Get_CRLH_Position+0xb6>
		break ;
 8000408:	e01f      	b.n	800044a <Get_CRLH_Position+0xba>
		return 0 ;
 800040a:	2300      	movs	r3, #0
 800040c:	e01e      	b.n	800044c <Get_CRLH_Position+0xbc>
		return 4;
 800040e:	2304      	movs	r3, #4
 8000410:	e01c      	b.n	800044c <Get_CRLH_Position+0xbc>
		return 8;
 8000412:	2308      	movs	r3, #8
 8000414:	e01a      	b.n	800044c <Get_CRLH_Position+0xbc>
		return 12;
 8000416:	230c      	movs	r3, #12
 8000418:	e018      	b.n	800044c <Get_CRLH_Position+0xbc>
		return 16;
 800041a:	2310      	movs	r3, #16
 800041c:	e016      	b.n	800044c <Get_CRLH_Position+0xbc>
		return 20;
 800041e:	2314      	movs	r3, #20
 8000420:	e014      	b.n	800044c <Get_CRLH_Position+0xbc>
		return 24;
 8000422:	2318      	movs	r3, #24
 8000424:	e012      	b.n	800044c <Get_CRLH_Position+0xbc>
		return 28;
 8000426:	231c      	movs	r3, #28
 8000428:	e010      	b.n	800044c <Get_CRLH_Position+0xbc>
		return 0;
 800042a:	2300      	movs	r3, #0
 800042c:	e00e      	b.n	800044c <Get_CRLH_Position+0xbc>
		return 4;
 800042e:	2304      	movs	r3, #4
 8000430:	e00c      	b.n	800044c <Get_CRLH_Position+0xbc>
		return 8;
 8000432:	2308      	movs	r3, #8
 8000434:	e00a      	b.n	800044c <Get_CRLH_Position+0xbc>
		return 12;
 8000436:	230c      	movs	r3, #12
 8000438:	e008      	b.n	800044c <Get_CRLH_Position+0xbc>
		return 16;
 800043a:	2310      	movs	r3, #16
 800043c:	e006      	b.n	800044c <Get_CRLH_Position+0xbc>
		return 20;
 800043e:	2314      	movs	r3, #20
 8000440:	e004      	b.n	800044c <Get_CRLH_Position+0xbc>
		return 24;
 8000442:	2318      	movs	r3, #24
 8000444:	e002      	b.n	800044c <Get_CRLH_Position+0xbc>
		return 28;
 8000446:	231c      	movs	r3, #28
 8000448:	e000      	b.n	800044c <Get_CRLH_Position+0xbc>
	}
	return 0;
 800044a:	2300      	movs	r3, #0
}
 800044c:	4618      	mov	r0, r3
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr

08000456 <MCAL_GPIO_init>:
 * @retval 			- None
 * Note				- STM32F103C6 MCU  has GPIO A,B,C,D,E
 * 					- But package LQF48 has only GPIO A,B and part of C/D
 */
void MCAL_GPIO_init(GPIO_Typedef* GPIOx,GPIO_Pinconfig_t *PinCofing)
{
 8000456:	b590      	push	{r4, r7, lr}
 8000458:	b085      	sub	sp, #20
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
 800045e:	6039      	str	r1, [r7, #0]
	//Pin configuration register low CRL from Pin 0 to Pin 7
	//Pin configuration register high CRH from Pin 8 to Pin 15

	volatile uint32_t * configregister = NULL ;
 8000460:	2300      	movs	r3, #0
 8000462:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_config = 0;
 8000464:	2300      	movs	r3, #0
 8000466:	73fb      	strb	r3, [r7, #15]
	configregister = (PinCofing->GPIO_Pin_Number <GPIO_PIN_8 ? &GPIOx->CRL :  &GPIOx->CRH);
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	881b      	ldrh	r3, [r3, #0]
 800046c:	2bff      	cmp	r3, #255	; 0xff
 800046e:	d801      	bhi.n	8000474 <MCAL_GPIO_init+0x1e>
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	e001      	b.n	8000478 <MCAL_GPIO_init+0x22>
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	3304      	adds	r3, #4
 8000478:	60bb      	str	r3, [r7, #8]
	//clear CNF8[1:0] MODE8[1:0]
	(*configregister) &=~(0xf<<Get_CRLH_Position(PinCofing->GPIO_Pin_Number));
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	881b      	ldrh	r3, [r3, #0]
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ff86 	bl	8000390 <Get_CRLH_Position>
 8000484:	4603      	mov	r3, r0
 8000486:	461a      	mov	r2, r3
 8000488:	230f      	movs	r3, #15
 800048a:	4093      	lsls	r3, r2
 800048c:	43da      	mvns	r2, r3
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	401a      	ands	r2, r3
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	601a      	str	r2, [r3, #0]

	//if the pin is output
	if(PinCofing->GPIO_Pin_Mode == GPIO_AF_output_Open_drain_Mode ||PinCofing->GPIO_Pin_Mode == GPIO_AF_output_Push_pull_Mode || PinCofing->GPIO_Pin_Mode == GPIO_output_Open_drain_Mode || PinCofing->GPIO_Pin_Mode == GPIO_AF_output_Push_pull_Mode)
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	789b      	ldrb	r3, [r3, #2]
 800049c:	2b07      	cmp	r3, #7
 800049e:	d00b      	beq.n	80004b8 <MCAL_GPIO_init+0x62>
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	789b      	ldrb	r3, [r3, #2]
 80004a4:	2b06      	cmp	r3, #6
 80004a6:	d007      	beq.n	80004b8 <MCAL_GPIO_init+0x62>
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	789b      	ldrb	r3, [r3, #2]
 80004ac:	2b05      	cmp	r3, #5
 80004ae:	d003      	beq.n	80004b8 <MCAL_GPIO_init+0x62>
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	789b      	ldrb	r3, [r3, #2]
 80004b4:	2b06      	cmp	r3, #6
 80004b6:	d10e      	bne.n	80004d6 <MCAL_GPIO_init+0x80>
	{
		PIN_config = ((PinCofing->GPIO_Pin_Mode - 4)<<2) | (((PinCofing->GPIO_Pin_Speed))&0x0f);
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	789b      	ldrb	r3, [r3, #2]
 80004bc:	3b04      	subs	r3, #4
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	b25a      	sxtb	r2, r3
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	78db      	ldrb	r3, [r3, #3]
 80004c6:	b25b      	sxtb	r3, r3
 80004c8:	f003 030f 	and.w	r3, r3, #15
 80004cc:	b25b      	sxtb	r3, r3
 80004ce:	4313      	orrs	r3, r2
 80004d0:	b25b      	sxtb	r3, r3
 80004d2:	73fb      	strb	r3, [r7, #15]
 80004d4:	e02c      	b.n	8000530 <MCAL_GPIO_init+0xda>

	}
	//the pin is input
	else
	{
		if(PinCofing->GPIO_Pin_Mode == GPIO_Floating_input_Mode || PinCofing->GPIO_Pin_Mode== GPIO_Analog_Mode)
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	789b      	ldrb	r3, [r3, #2]
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d003      	beq.n	80004e6 <MCAL_GPIO_init+0x90>
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	789b      	ldrb	r3, [r3, #2]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d107      	bne.n	80004f6 <MCAL_GPIO_init+0xa0>
		{
			PIN_config = ((((PinCofing->GPIO_Pin_Mode)<<2)|0x0 )&0x0f);
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	789b      	ldrb	r3, [r3, #2]
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	f003 030f 	and.w	r3, r3, #15
 80004f2:	73fb      	strb	r3, [r7, #15]
 80004f4:	e01c      	b.n	8000530 <MCAL_GPIO_init+0xda>

		}
		else if (PinCofing->GPIO_Pin_Mode == GPIO_AF_input_Mode )
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	789b      	ldrb	r3, [r3, #2]
 80004fa:	2b08      	cmp	r3, #8
 80004fc:	d102      	bne.n	8000504 <MCAL_GPIO_init+0xae>
		{
			PIN_config = ((((GPIO_Floating_input_Mode)<<2)|0x0 )&0x0f);
 80004fe:	2304      	movs	r3, #4
 8000500:	73fb      	strb	r3, [r7, #15]
 8000502:	e015      	b.n	8000530 <MCAL_GPIO_init+0xda>

		}
		//pull up pull down input
		else
		{
			PIN_config = ((((GPIO_Input_with_pull_up_Mode)<<2)|0x0 )&0x0f);
 8000504:	2308      	movs	r3, #8
 8000506:	73fb      	strb	r3, [r7, #15]
			if(PinCofing->GPIO_Pin_Mode == GPIO_Input_with_pull_up_Mode)
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	789b      	ldrb	r3, [r3, #2]
 800050c:	2b02      	cmp	r3, #2
 800050e:	d107      	bne.n	8000520 <MCAL_GPIO_init+0xca>
			{
				GPIOx->ODR |= PinCofing->GPIO_Pin_Number;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	683a      	ldr	r2, [r7, #0]
 8000516:	8812      	ldrh	r2, [r2, #0]
 8000518:	431a      	orrs	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	e007      	b.n	8000530 <MCAL_GPIO_init+0xda>
			}
			else
			{
				GPIOx->ODR &=~ PinCofing->GPIO_Pin_Number;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	8812      	ldrh	r2, [r2, #0]
 8000528:	43d2      	mvns	r2, r2
 800052a:	401a      	ands	r2, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*configregister) |= (PIN_config<<Get_CRLH_Position(PinCofing->GPIO_Pin_Number));
 8000530:	7bfc      	ldrb	r4, [r7, #15]
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	881b      	ldrh	r3, [r3, #0]
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ff2a 	bl	8000390 <Get_CRLH_Position>
 800053c:	4603      	mov	r3, r0
 800053e:	fa04 f203 	lsl.w	r2, r4, r3
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	431a      	orrs	r2, r3
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	601a      	str	r2, [r3, #0]
}
 800054c:	bf00      	nop
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	bd90      	pop	{r4, r7, pc}

08000554 <MCAL_RCC_GetSysCLK_Freq>:
1111: SYSCLK divided by 512
*/
const uint8_t AHB_Prescaler_table[16] = {0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9};

uint32_t MCAL_RCC_GetSysCLK_Freq(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
	00: HSI oscillator used as system clock
	01: HSE oscillator used as system clock
	10: PLL used as system clock
	11: Not applicable
	*/
	switch((RCC->CFGR>>2) &  0b11)
 8000558:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <MCAL_RCC_GetSysCLK_Freq+0x30>)
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	089b      	lsrs	r3, r3, #2
 800055e:	f003 0303 	and.w	r3, r3, #3
 8000562:	2b01      	cmp	r3, #1
 8000564:	d006      	beq.n	8000574 <MCAL_RCC_GetSysCLK_Freq+0x20>
 8000566:	2b01      	cmp	r3, #1
 8000568:	d302      	bcc.n	8000570 <MCAL_RCC_GetSysCLK_Freq+0x1c>
 800056a:	2b02      	cmp	r3, #2
 800056c:	d004      	beq.n	8000578 <MCAL_RCC_GetSysCLK_Freq+0x24>
 800056e:	e005      	b.n	800057c <MCAL_RCC_GetSysCLK_Freq+0x28>
	{
	case 0 :
		return HSI_RC_CLk;
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <MCAL_RCC_GetSysCLK_Freq+0x34>)
 8000572:	e003      	b.n	800057c <MCAL_RCC_GetSysCLK_Freq+0x28>
		break;
	case 1 :
		return HSE_clk;
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <MCAL_RCC_GetSysCLK_Freq+0x38>)
 8000576:	e001      	b.n	800057c <MCAL_RCC_GetSysCLK_Freq+0x28>
		break;
	case 2 :
		return 16000000;
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <MCAL_RCC_GetSysCLK_Freq+0x38>)
 800057a:	e7ff      	b.n	800057c <MCAL_RCC_GetSysCLK_Freq+0x28>
		break;
	}
}
 800057c:	4618      	mov	r0, r3
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	40021000 	.word	0x40021000
 8000588:	007a1200 	.word	0x007a1200
 800058c:	00f42400 	.word	0x00f42400

08000590 <MCAL_RCC_GetHCLK_Freq>:
uint32_t MCAL_RCC_GetHCLK_Freq(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetSysCLK_Freq() >> APB_Prescaler_table[(RCC->CFGR >> 11 )&0b111]);
 8000594:	f7ff ffde 	bl	8000554 <MCAL_RCC_GetSysCLK_Freq>
 8000598:	4601      	mov	r1, r0
 800059a:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <MCAL_RCC_GetHCLK_Freq+0x20>)
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	0adb      	lsrs	r3, r3, #11
 80005a0:	f003 0307 	and.w	r3, r3, #7
 80005a4:	4a03      	ldr	r2, [pc, #12]	; (80005b4 <MCAL_RCC_GetHCLK_Freq+0x24>)
 80005a6:	5cd3      	ldrb	r3, [r2, r3]
 80005a8:	fa21 f303 	lsr.w	r3, r1, r3

}
 80005ac:	4618      	mov	r0, r3
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40021000 	.word	0x40021000
 80005b4:	08000a30 	.word	0x08000a30

080005b8 <MCAL_RCC_GetPCLK1_Freq>:
uint32_t MCAL_RCC_GetPCLK1_Freq(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
	return (MCAL_RCC_GetHCLK_Freq() >> APB_Prescaler_table[(RCC->CFGR >> 8 )&0b111]);
 80005bc:	f7ff ffe8 	bl	8000590 <MCAL_RCC_GetHCLK_Freq>
 80005c0:	4601      	mov	r1, r0
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <MCAL_RCC_GetPCLK1_Freq+0x20>)
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	0a1b      	lsrs	r3, r3, #8
 80005c8:	f003 0307 	and.w	r3, r3, #7
 80005cc:	4a03      	ldr	r2, [pc, #12]	; (80005dc <MCAL_RCC_GetPCLK1_Freq+0x24>)
 80005ce:	5cd3      	ldrb	r3, [r2, r3]
 80005d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40021000 	.word	0x40021000
 80005dc:	08000a30 	.word	0x08000a30

080005e0 <MCAL_RCC_GetPCLK2_Freq>:
uint32_t MCAL_RCC_GetPCLK2_Freq(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	//Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GetHCLK_Freq() >> APB_Prescaler_table[(RCC->CFGR >> 11 )&0b111]);
 80005e4:	f7ff ffd4 	bl	8000590 <MCAL_RCC_GetHCLK_Freq>
 80005e8:	4601      	mov	r1, r0
 80005ea:	4b05      	ldr	r3, [pc, #20]	; (8000600 <MCAL_RCC_GetPCLK2_Freq+0x20>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	0adb      	lsrs	r3, r3, #11
 80005f0:	f003 0307 	and.w	r3, r3, #7
 80005f4:	4a03      	ldr	r2, [pc, #12]	; (8000604 <MCAL_RCC_GetPCLK2_Freq+0x24>)
 80005f6:	5cd3      	ldrb	r3, [r2, r3]
 80005f8:	fa21 f303 	lsr.w	r3, r1, r3

}
 80005fc:	4618      	mov	r0, r3
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40021000 	.word	0x40021000
 8000604:	08000a30 	.word	0x08000a30

08000608 <MCAL_UART_Init>:
 * @retval 			- None
 * Note				- STM32F103C6 MCU  has UART 1 ,2 ,3

 */
void MCAL_UART_Init(USART_typedef * Usartx , UART_config * UART_config)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
	Global_UART_Config = UART_config ;
 8000612:	4a57      	ldr	r2, [pc, #348]	; (8000770 <MCAL_UART_Init+0x168>)
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	6013      	str	r3, [r2, #0]
	uint32_t PCLK,BRR;
	if(Usartx == USART1)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a56      	ldr	r2, [pc, #344]	; (8000774 <MCAL_UART_Init+0x16c>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <MCAL_UART_Init+0x26>
		RCC_USART1_CLK_EN();
 8000620:	4b55      	ldr	r3, [pc, #340]	; (8000778 <MCAL_UART_Init+0x170>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a54      	ldr	r2, [pc, #336]	; (8000778 <MCAL_UART_Init+0x170>)
 8000626:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	e014      	b.n	8000658 <MCAL_UART_Init+0x50>
	else if (Usartx == USART2)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4a52      	ldr	r2, [pc, #328]	; (800077c <MCAL_UART_Init+0x174>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d106      	bne.n	8000644 <MCAL_UART_Init+0x3c>
		RCC_USART2_CLK_EN();
 8000636:	4b50      	ldr	r3, [pc, #320]	; (8000778 <MCAL_UART_Init+0x170>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	4a4f      	ldr	r2, [pc, #316]	; (8000778 <MCAL_UART_Init+0x170>)
 800063c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000640:	61d3      	str	r3, [r2, #28]
 8000642:	e009      	b.n	8000658 <MCAL_UART_Init+0x50>
	else if (Usartx == USART3)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a4e      	ldr	r2, [pc, #312]	; (8000780 <MCAL_UART_Init+0x178>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d105      	bne.n	8000658 <MCAL_UART_Init+0x50>
		RCC_USART3_CLK_EN();
 800064c:	4b4a      	ldr	r3, [pc, #296]	; (8000778 <MCAL_UART_Init+0x170>)
 800064e:	69db      	ldr	r3, [r3, #28]
 8000650:	4a49      	ldr	r2, [pc, #292]	; (8000778 <MCAL_UART_Init+0x170>)
 8000652:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000656:	61d3      	str	r3, [r2, #28]


	Usartx->CR1 |= 1<<13;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	60da      	str	r2, [r3, #12]
	Usartx->CR1 |= UART_config->USART_Mode;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	683a      	ldr	r2, [r7, #0]
 800066a:	7812      	ldrb	r2, [r2, #0]
 800066c:	431a      	orrs	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	60da      	str	r2, [r3, #12]
	Usartx->CR1 |= UART_config->Parity;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	68db      	ldr	r3, [r3, #12]
 8000676:	683a      	ldr	r2, [r7, #0]
 8000678:	7a52      	ldrb	r2, [r2, #9]
 800067a:	431a      	orrs	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	60da      	str	r2, [r3, #12]
	Usartx->CR1 |= UART_config->Payload_length;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	683a      	ldr	r2, [r7, #0]
 8000686:	7a12      	ldrb	r2, [r2, #8]
 8000688:	431a      	orrs	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	60da      	str	r2, [r3, #12]
	Usartx->CR2 |= UART_config->stop_bits;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	691b      	ldr	r3, [r3, #16]
 8000692:	683a      	ldr	r2, [r7, #0]
 8000694:	7a92      	ldrb	r2, [r2, #10]
 8000696:	431a      	orrs	r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	611a      	str	r2, [r3, #16]
	Usartx->CR3 |= UART_config->HW_flow_control;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	695b      	ldr	r3, [r3, #20]
 80006a0:	683a      	ldr	r2, [r7, #0]
 80006a2:	7ad2      	ldrb	r2, [r2, #11]
 80006a4:	431a      	orrs	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	615a      	str	r2, [r3, #20]


	if(Usartx == USART1)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4a31      	ldr	r2, [pc, #196]	; (8000774 <MCAL_UART_Init+0x16c>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d103      	bne.n	80006ba <MCAL_UART_Init+0xb2>
		PCLK = MCAL_RCC_GetPCLK2_Freq();
 80006b2:	f7ff ff95 	bl	80005e0 <MCAL_RCC_GetPCLK2_Freq>
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	e002      	b.n	80006c0 <MCAL_UART_Init+0xb8>
	else
		PCLK = MCAL_RCC_GetPCLK1_Freq();
 80006ba:	f7ff ff7d 	bl	80005b8 <MCAL_RCC_GetPCLK1_Freq>
 80006be:	60f8      	str	r0, [r7, #12]

	BRR = UART_BRR_Register(PCLK,UART_config->BaudRate);
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006cc:	0119      	lsls	r1, r3, #4
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	4613      	mov	r3, r2
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	4413      	add	r3, r2
 80006d6:	009a      	lsls	r2, r3, #2
 80006d8:	441a      	add	r2, r3
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	011b      	lsls	r3, r3, #4
 80006ea:	68f8      	ldr	r0, [r7, #12]
 80006ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80006f0:	2064      	movs	r0, #100	; 0x64
 80006f2:	fb00 f303 	mul.w	r3, r0, r3
 80006f6:	1ad3      	subs	r3, r2, r3
 80006f8:	011b      	lsls	r3, r3, #4
 80006fa:	4a22      	ldr	r2, [pc, #136]	; (8000784 <MCAL_UART_Init+0x17c>)
 80006fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000700:	095b      	lsrs	r3, r3, #5
 8000702:	f003 030f 	and.w	r3, r3, #15
 8000706:	430b      	orrs	r3, r1
 8000708:	60bb      	str	r3, [r7, #8]
	Usartx->BRR = BRR;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	68ba      	ldr	r2, [r7, #8]
 800070e:	609a      	str	r2, [r3, #8]

	//IRQ enable
	if(UART_config->IRQ_Enable != UART_IRQ_Enable_None)
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	7b1b      	ldrb	r3, [r3, #12]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d026      	beq.n	8000766 <MCAL_UART_Init+0x15e>
	{
		Usartx->CR1 |= (UART_config->IRQ_Enable);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	683a      	ldr	r2, [r7, #0]
 800071e:	7b12      	ldrb	r2, [r2, #12]
 8000720:	431a      	orrs	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	60da      	str	r2, [r3, #12]

		if(Usartx==USART1)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a12      	ldr	r2, [pc, #72]	; (8000774 <MCAL_UART_Init+0x16c>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d106      	bne.n	800073c <MCAL_UART_Init+0x134>
			NVIC_IRQ37_USART_Enable;
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <MCAL_UART_Init+0x180>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a15      	ldr	r2, [pc, #84]	; (8000788 <MCAL_UART_Init+0x180>)
 8000734:	f043 0320 	orr.w	r3, r3, #32
 8000738:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_USART_Enable;
		else if (Usartx==USART3)
			NVIC_IRQ39_USART_Enable;
	}

}
 800073a:	e014      	b.n	8000766 <MCAL_UART_Init+0x15e>
		else if (Usartx==USART2)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a0f      	ldr	r2, [pc, #60]	; (800077c <MCAL_UART_Init+0x174>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d106      	bne.n	8000752 <MCAL_UART_Init+0x14a>
			NVIC_IRQ38_USART_Enable;
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MCAL_UART_Init+0x180>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a0f      	ldr	r2, [pc, #60]	; (8000788 <MCAL_UART_Init+0x180>)
 800074a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800074e:	6013      	str	r3, [r2, #0]
}
 8000750:	e009      	b.n	8000766 <MCAL_UART_Init+0x15e>
		else if (Usartx==USART3)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <MCAL_UART_Init+0x178>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d105      	bne.n	8000766 <MCAL_UART_Init+0x15e>
			NVIC_IRQ39_USART_Enable;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MCAL_UART_Init+0x180>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <MCAL_UART_Init+0x180>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000764:	6013      	str	r3, [r2, #0]
}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	2000001c 	.word	0x2000001c
 8000774:	40013800 	.word	0x40013800
 8000778:	40021000 	.word	0x40021000
 800077c:	40004400 	.word	0x40004400
 8000780:	40004800 	.word	0x40004800
 8000784:	51eb851f 	.word	0x51eb851f
 8000788:	e000e104 	.word	0xe000e104

0800078c <MCAL_UART_Set_GPIO_Pins>:
 * @retval 			- None
 * Note				- STM32F103C6 MCU  has UART 1 ,2 ,3

 */
void MCAL_UART_Set_GPIO_Pins(USART_typedef * Usartx)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	GPIO_Pinconfig_t pincfg ;

	if (Usartx == USART1)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4a2a      	ldr	r2, [pc, #168]	; (8000840 <MCAL_UART_Set_GPIO_Pins+0xb4>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d117      	bne.n	80007cc <MCAL_UART_Set_GPIO_Pins+0x40>
			// PA10 RX
			// PA11 CTS
			// PA12 RTS

			// PA9 TX
			pincfg.GPIO_Pin_Number = GPIO_PIN_9;
 800079c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007a0:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_Pin_Mode = GPIO_AF_output_Push_pull_Mode;
 80007a2:	2306      	movs	r3, #6
 80007a4:	73bb      	strb	r3, [r7, #14]
			pincfg.GPIO_Pin_Speed = GPIO_SPEED_10M;
 80007a6:	2301      	movs	r3, #1
 80007a8:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_init(GPIOA, &pincfg);
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	4619      	mov	r1, r3
 80007b0:	4824      	ldr	r0, [pc, #144]	; (8000844 <MCAL_UART_Set_GPIO_Pins+0xb8>)
 80007b2:	f7ff fe50 	bl	8000456 <MCAL_GPIO_init>

			// PA10 RX
			pincfg.GPIO_Pin_Number = GPIO_PIN_10;
 80007b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ba:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_Pin_Mode = GPIO_AF_input_Mode;
 80007bc:	2308      	movs	r3, #8
 80007be:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_init(GPIOA, &pincfg);
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	4619      	mov	r1, r3
 80007c6:	481f      	ldr	r0, [pc, #124]	; (8000844 <MCAL_UART_Set_GPIO_Pins+0xb8>)
 80007c8:	f7ff fe45 	bl	8000456 <MCAL_GPIO_init>

		}



		if (Usartx == USART2)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a1e      	ldr	r2, [pc, #120]	; (8000848 <MCAL_UART_Set_GPIO_Pins+0xbc>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d115      	bne.n	8000800 <MCAL_UART_Set_GPIO_Pins+0x74>
			// PA3 RX
			// PA0 CTS
			// PA1 RTS

			// PA2 TX
			pincfg.GPIO_Pin_Number = GPIO_PIN_2;
 80007d4:	2304      	movs	r3, #4
 80007d6:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_Pin_Mode = GPIO_AF_output_Push_pull_Mode;
 80007d8:	2306      	movs	r3, #6
 80007da:	73bb      	strb	r3, [r7, #14]
			pincfg.GPIO_Pin_Speed = GPIO_SPEED_10M;
 80007dc:	2301      	movs	r3, #1
 80007de:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_init(GPIOA, &pincfg);
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	4619      	mov	r1, r3
 80007e6:	4817      	ldr	r0, [pc, #92]	; (8000844 <MCAL_UART_Set_GPIO_Pins+0xb8>)
 80007e8:	f7ff fe35 	bl	8000456 <MCAL_GPIO_init>

			// PA3 RX
			pincfg.GPIO_Pin_Number = GPIO_PIN_3;
 80007ec:	2308      	movs	r3, #8
 80007ee:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_Pin_Mode = GPIO_AF_input_Mode;
 80007f0:	2308      	movs	r3, #8
 80007f2:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_init(GPIOA, &pincfg);
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4619      	mov	r1, r3
 80007fa:	4812      	ldr	r0, [pc, #72]	; (8000844 <MCAL_UART_Set_GPIO_Pins+0xb8>)
 80007fc:	f7ff fe2b 	bl	8000456 <MCAL_GPIO_init>
		}




		if (Usartx == USART3)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a12      	ldr	r2, [pc, #72]	; (800084c <MCAL_UART_Set_GPIO_Pins+0xc0>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d117      	bne.n	8000838 <MCAL_UART_Set_GPIO_Pins+0xac>
			// PB11 RX
			// PB13 CTS
			// PB14 RTS

			// PB10 TX
			pincfg.GPIO_Pin_Number = GPIO_PIN_10;
 8000808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800080c:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_Pin_Mode = GPIO_AF_output_Push_pull_Mode;
 800080e:	2306      	movs	r3, #6
 8000810:	73bb      	strb	r3, [r7, #14]
			pincfg.GPIO_Pin_Speed = GPIO_SPEED_10M;
 8000812:	2301      	movs	r3, #1
 8000814:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_init(GPIOB, &pincfg);
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	4619      	mov	r1, r3
 800081c:	480c      	ldr	r0, [pc, #48]	; (8000850 <MCAL_UART_Set_GPIO_Pins+0xc4>)
 800081e:	f7ff fe1a 	bl	8000456 <MCAL_GPIO_init>

			// PB11 RX
			pincfg.GPIO_Pin_Number = GPIO_PIN_11;
 8000822:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000826:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_Pin_Mode = GPIO_AF_input_Mode;
 8000828:	2308      	movs	r3, #8
 800082a:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_init(GPIOB, &pincfg);
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	4619      	mov	r1, r3
 8000832:	4807      	ldr	r0, [pc, #28]	; (8000850 <MCAL_UART_Set_GPIO_Pins+0xc4>)
 8000834:	f7ff fe0f 	bl	8000456 <MCAL_GPIO_init>

			}


		}
}
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40013800 	.word	0x40013800
 8000844:	40010800 	.word	0x40010800
 8000848:	40004400 	.word	0x40004400
 800084c:	40004800 	.word	0x40004800
 8000850:	40010c00 	.word	0x40010c00

08000854 <MCAL_UART_Send_Data>:
 * Note				- STM32F103C6 MCU  has UART 1 ,2 ,3

 */
void MCAL_UART_Send_Data(USART_typedef * Usartx , uint16_t * ptxbuffer , enum Polling_mechanism Polling_en)

{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	4613      	mov	r3, r2
 8000860:	71fb      	strb	r3, [r7, #7]
	if(Polling_en==enable)
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d102      	bne.n	800086e <MCAL_UART_Send_Data+0x1a>
		while(!Usartx->SR & 1<<7);
 8000868:	bf00      	nop
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	681b      	ldr	r3, [r3, #0]
		Usartx->DR = (*ptxbuffer & (uint16_t)0x01ff);
	}
	else
	{
		//8 Bit data
		Usartx->DR = (*ptxbuffer & (uint8_t)0x0ff);
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	b2da      	uxtb	r2, r3
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	605a      	str	r2, [r3, #4]

	}
}
 8000878:	bf00      	nop
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr

08000882 <MCAL_UART_Recieve_Data>:
 * @retval 			- None
 * Note				- STM32F103C6 MCU  has UART 1 ,2 ,3

 */
void MCAL_UART_Recieve_Data(USART_typedef * Usartx , uint16_t * prxbuffer , enum Polling_mechanism Polling_en)
{
 8000882:	b480      	push	{r7}
 8000884:	b085      	sub	sp, #20
 8000886:	af00      	add	r7, sp, #0
 8000888:	60f8      	str	r0, [r7, #12]
 800088a:	60b9      	str	r1, [r7, #8]
 800088c:	4613      	mov	r3, r2
 800088e:	71fb      	strb	r3, [r7, #7]
	if(Polling_en==enable)
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d106      	bne.n	80008a4 <MCAL_UART_Recieve_Data+0x22>
	{
		while(!(Usartx->SR & 1<<5));
 8000896:	bf00      	nop
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f003 0320 	and.w	r3, r3, #32
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d0f9      	beq.n	8000898 <MCAL_UART_Recieve_Data+0x16>
		{
			*((uint16_t*)prxbuffer) = (Usartx->DR & (uint8_t)0x7f);
		}
	}

}
 80008a4:	bf00      	nop
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
	...

080008b0 <USART1_IRQHandler>:


//Interrupt handlers for the UART peripheral
void USART1_IRQHandler (void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_Callback();
 80008b4:	4b02      	ldr	r3, [pc, #8]	; (80008c0 <USART1_IRQHandler+0x10>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	691b      	ldr	r3, [r3, #16]
 80008ba:	4798      	blx	r3
}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	2000001c 	.word	0x2000001c

080008c4 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_Callback();
 80008c8:	4b02      	ldr	r3, [pc, #8]	; (80008d4 <USART2_IRQHandler+0x10>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	691b      	ldr	r3, [r3, #16]
 80008ce:	4798      	blx	r3

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	2000001c 	.word	0x2000001c

080008d8 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_Callback();
 80008dc:	4b02      	ldr	r3, [pc, #8]	; (80008e8 <USART3_IRQHandler+0x10>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	691b      	ldr	r3, [r3, #16]
 80008e2:	4798      	blx	r3

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	2000001c 	.word	0x2000001c

080008ec <clock_init>:
	_delay_ms(1000);

}

void clock_init(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
	//Enabling the clock
	RCC_GPIOA_CLK_EN();
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <clock_init+0x30>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	4a09      	ldr	r2, [pc, #36]	; (800091c <clock_init+0x30>)
 80008f6:	f043 0304 	orr.w	r3, r3, #4
 80008fa:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <clock_init+0x30>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a06      	ldr	r2, [pc, #24]	; (800091c <clock_init+0x30>)
 8000902:	f043 0308 	orr.w	r3, r3, #8
 8000906:	6193      	str	r3, [r2, #24]
	AFIO_GPIO_CLK_EN();
 8000908:	4b04      	ldr	r3, [pc, #16]	; (800091c <clock_init+0x30>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	4a03      	ldr	r2, [pc, #12]	; (800091c <clock_init+0x30>)
 800090e:	f043 0301 	orr.w	r3, r3, #1
 8000912:	6193      	str	r3, [r2, #24]
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	40021000 	.word	0x40021000

08000920 <main>:
int main (void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
	UART_config uartcnfg;
	unsigned char key ;
	clock_init();
 8000926:	f7ff ffe1 	bl	80008ec <clock_init>
	uartcnfg.BaudRate = UART_Baudrate_115200;
 800092a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800092e:	60bb      	str	r3, [r7, #8]
	uartcnfg.HW_flow_control = HW_flwctl_None;
 8000930:	2300      	movs	r3, #0
 8000932:	73fb      	strb	r3, [r7, #15]
	uartcnfg.IRQ_Enable = UART_IRQ_Enable_None;
 8000934:	2300      	movs	r3, #0
 8000936:	743b      	strb	r3, [r7, #16]
	uartcnfg.P_IRQ_Callback = NULL;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
	uartcnfg.Parity = UART_Parity_None;
 800093c:	2300      	movs	r3, #0
 800093e:	737b      	strb	r3, [r7, #13]
	uartcnfg.Payload_length = Payload_length_8;
 8000940:	2300      	movs	r3, #0
 8000942:	733b      	strb	r3, [r7, #12]
	uartcnfg.stop_bits	= stop_bits_1;
 8000944:	2300      	movs	r3, #0
 8000946:	73bb      	strb	r3, [r7, #14]
	uartcnfg.USART_Mode = UART_Mode_Tx_RX;
 8000948:	230c      	movs	r3, #12
 800094a:	713b      	strb	r3, [r7, #4]
	MCAL_UART_Init(USART1, &uartcnfg);
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	4619      	mov	r1, r3
 8000950:	4809      	ldr	r0, [pc, #36]	; (8000978 <main+0x58>)
 8000952:	f7ff fe59 	bl	8000608 <MCAL_UART_Init>
	MCAL_UART_Set_GPIO_Pins(USART1);
 8000956:	4808      	ldr	r0, [pc, #32]	; (8000978 <main+0x58>)
 8000958:	f7ff ff18 	bl	800078c <MCAL_UART_Set_GPIO_Pins>

	    while (1)
	    {
	    	MCAL_UART_Recieve_Data(USART1, &key, enable);
 800095c:	1cfb      	adds	r3, r7, #3
 800095e:	2200      	movs	r2, #0
 8000960:	4619      	mov	r1, r3
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <main+0x58>)
 8000964:	f7ff ff8d 	bl	8000882 <MCAL_UART_Recieve_Data>
	    	MCAL_UART_Send_Data(USART1, &key, enable);
 8000968:	1cfb      	adds	r3, r7, #3
 800096a:	2200      	movs	r2, #0
 800096c:	4619      	mov	r1, r3
 800096e:	4802      	ldr	r0, [pc, #8]	; (8000978 <main+0x58>)
 8000970:	f7ff ff70 	bl	8000854 <MCAL_UART_Send_Data>
	    	MCAL_UART_Recieve_Data(USART1, &key, enable);
 8000974:	e7f2      	b.n	800095c <main+0x3c>
 8000976:	bf00      	nop
 8000978:	40013800 	.word	0x40013800

0800097c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800097c:	480d      	ldr	r0, [pc, #52]	; (80009b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800097e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000980:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000984:	480c      	ldr	r0, [pc, #48]	; (80009b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000986:	490d      	ldr	r1, [pc, #52]	; (80009bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000988:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <LoopForever+0xe>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800098c:	e002      	b.n	8000994 <LoopCopyDataInit>

0800098e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000992:	3304      	adds	r3, #4

08000994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000998:	d3f9      	bcc.n	800098e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099a:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800099c:	4c0a      	ldr	r4, [pc, #40]	; (80009c8 <LoopForever+0x16>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a0:	e001      	b.n	80009a6 <LoopFillZerobss>

080009a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a4:	3204      	adds	r2, #4

080009a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a8:	d3fb      	bcc.n	80009a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009aa:	f000 f811 	bl	80009d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ae:	f7ff ffb7 	bl	8000920 <main>

080009b2 <LoopForever>:

LoopForever:
    b LoopForever
 80009b2:	e7fe      	b.n	80009b2 <LoopForever>
  ldr   r0, =_estack
 80009b4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009bc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80009c0:	08000a40 	.word	0x08000a40
  ldr r2, =_sbss
 80009c4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80009c8:	2000005c 	.word	0x2000005c

080009cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC1_2_IRQHandler>
	...

080009d0 <__libc_init_array>:
 80009d0:	b570      	push	{r4, r5, r6, lr}
 80009d2:	2500      	movs	r5, #0
 80009d4:	4e0c      	ldr	r6, [pc, #48]	; (8000a08 <__libc_init_array+0x38>)
 80009d6:	4c0d      	ldr	r4, [pc, #52]	; (8000a0c <__libc_init_array+0x3c>)
 80009d8:	1ba4      	subs	r4, r4, r6
 80009da:	10a4      	asrs	r4, r4, #2
 80009dc:	42a5      	cmp	r5, r4
 80009de:	d109      	bne.n	80009f4 <__libc_init_array+0x24>
 80009e0:	f000 f81a 	bl	8000a18 <_init>
 80009e4:	2500      	movs	r5, #0
 80009e6:	4e0a      	ldr	r6, [pc, #40]	; (8000a10 <__libc_init_array+0x40>)
 80009e8:	4c0a      	ldr	r4, [pc, #40]	; (8000a14 <__libc_init_array+0x44>)
 80009ea:	1ba4      	subs	r4, r4, r6
 80009ec:	10a4      	asrs	r4, r4, #2
 80009ee:	42a5      	cmp	r5, r4
 80009f0:	d105      	bne.n	80009fe <__libc_init_array+0x2e>
 80009f2:	bd70      	pop	{r4, r5, r6, pc}
 80009f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009f8:	4798      	blx	r3
 80009fa:	3501      	adds	r5, #1
 80009fc:	e7ee      	b.n	80009dc <__libc_init_array+0xc>
 80009fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a02:	4798      	blx	r3
 8000a04:	3501      	adds	r5, #1
 8000a06:	e7f2      	b.n	80009ee <__libc_init_array+0x1e>
 8000a08:	08000a38 	.word	0x08000a38
 8000a0c:	08000a38 	.word	0x08000a38
 8000a10:	08000a38 	.word	0x08000a38
 8000a14:	08000a3c 	.word	0x08000a3c

08000a18 <_init>:
 8000a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a1a:	bf00      	nop
 8000a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a1e:	bc08      	pop	{r3}
 8000a20:	469e      	mov	lr, r3
 8000a22:	4770      	bx	lr

08000a24 <_fini>:
 8000a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a26:	bf00      	nop
 8000a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a2a:	bc08      	pop	{r3}
 8000a2c:	469e      	mov	lr, r3
 8000a2e:	4770      	bx	lr
