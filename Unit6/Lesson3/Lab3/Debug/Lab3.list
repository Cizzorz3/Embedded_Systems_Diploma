
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000230  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800033c  0800033c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800033c  0800033c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800033c  0800033c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800033c  0800033c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800033c  0800033c  0001033c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000340  08000340  00010340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000344  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000348  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000348  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000014ac  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000056c  00000000  00000000  000214d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001b0  00000000  00000000  00021a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000168  00000000  00000000  00021bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000021c9  00000000  00000000  00021d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001df6  00000000  00000000  00023f29  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007cde0  00000000  00000000  00025d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a2aff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004f0  00000000  00000000  000a2b7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000324 	.word	0x08000324

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000324 	.word	0x08000324

0800014c <main>:
#define GPIOA_ODR *(volatile uint32_t *)(GPIOA_BASE + 0x0C)
#define RCC_APB2ENR *(volatile uint32_t *)(RCC_base + 0x18)
#define RCC_CFGR *(volatile uint32_t *)(RCC_base+0x04)
#define RCC_CR *(volatile uint32_t *)(RCC_base+0x00)
int main(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
//InitGPIOA
RCC_CR |= 1<<24;
 8000152:	4b29      	ldr	r3, [pc, #164]	; (80001f8 <main+0xac>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	4a28      	ldr	r2, [pc, #160]	; (80001f8 <main+0xac>)
 8000158:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800015c:	6013      	str	r3, [r2, #0]
RCC_APB2ENR |= 1<<2;
 800015e:	4b27      	ldr	r3, [pc, #156]	; (80001fc <main+0xb0>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	4a26      	ldr	r2, [pc, #152]	; (80001fc <main+0xb0>)
 8000164:	f043 0304 	orr.w	r3, r3, #4
 8000168:	6013      	str	r3, [r2, #0]
RCC_CFGR |= (0b10<<0);
 800016a:	4b25      	ldr	r3, [pc, #148]	; (8000200 <main+0xb4>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	4a24      	ldr	r2, [pc, #144]	; (8000200 <main+0xb4>)
 8000170:	f043 0302 	orr.w	r3, r3, #2
 8000174:	6013      	str	r3, [r2, #0]
RCC_CFGR |= (0b0110<<18);
 8000176:	4b22      	ldr	r3, [pc, #136]	; (8000200 <main+0xb4>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	4a21      	ldr	r2, [pc, #132]	; (8000200 <main+0xb4>)
 800017c:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 8000180:	6013      	str	r3, [r2, #0]
RCC_CFGR |= (0b100<<8);
 8000182:	4b1f      	ldr	r3, [pc, #124]	; (8000200 <main+0xb4>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4a1e      	ldr	r2, [pc, #120]	; (8000200 <main+0xb4>)
 8000188:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800018c:	6013      	str	r3, [r2, #0]
RCC_CFGR |= (0b101<<11);
 800018e:	4b1c      	ldr	r3, [pc, #112]	; (8000200 <main+0xb4>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4a1b      	ldr	r2, [pc, #108]	; (8000200 <main+0xb4>)
 8000194:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8000198:	6013      	str	r3, [r2, #0]

GPIOA_CRH &= 0xFF0FFFFF;
 800019a:	4b1a      	ldr	r3, [pc, #104]	; (8000204 <main+0xb8>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4a19      	ldr	r2, [pc, #100]	; (8000204 <main+0xb8>)
 80001a0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001a4:	6013      	str	r3, [r2, #0]
GPIOA_CRH |= 0x00200000;
 80001a6:	4b17      	ldr	r3, [pc, #92]	; (8000204 <main+0xb8>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	4a16      	ldr	r2, [pc, #88]	; (8000204 <main+0xb8>)
 80001ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001b0:	6013      	str	r3, [r2, #0]
while(1)
{
GPIOA_ODR |= 1<<13 ;
 80001b2:	4b15      	ldr	r3, [pc, #84]	; (8000208 <main+0xbc>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	4a14      	ldr	r2, [pc, #80]	; (8000208 <main+0xbc>)
 80001b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001bc:	6013      	str	r3, [r2, #0]
for(int i = 0; i < 5000; i++); // arbitrary delay
 80001be:	2300      	movs	r3, #0
 80001c0:	607b      	str	r3, [r7, #4]
 80001c2:	e002      	b.n	80001ca <main+0x7e>
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	3301      	adds	r3, #1
 80001c8:	607b      	str	r3, [r7, #4]
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f241 3287 	movw	r2, #4999	; 0x1387
 80001d0:	4293      	cmp	r3, r2
 80001d2:	ddf7      	ble.n	80001c4 <main+0x78>
GPIOA_ODR &= ~(1<<13) ;
 80001d4:	4b0c      	ldr	r3, [pc, #48]	; (8000208 <main+0xbc>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a0b      	ldr	r2, [pc, #44]	; (8000208 <main+0xbc>)
 80001da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80001de:	6013      	str	r3, [r2, #0]
for(int i = 0; i < 5000; i++); // arbitrary delay
 80001e0:	2300      	movs	r3, #0
 80001e2:	603b      	str	r3, [r7, #0]
 80001e4:	e002      	b.n	80001ec <main+0xa0>
 80001e6:	683b      	ldr	r3, [r7, #0]
 80001e8:	3301      	adds	r3, #1
 80001ea:	603b      	str	r3, [r7, #0]
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	f241 3287 	movw	r2, #4999	; 0x1387
 80001f2:	4293      	cmp	r3, r2
 80001f4:	ddf7      	ble.n	80001e6 <main+0x9a>
GPIOA_ODR |= 1<<13 ;
 80001f6:	e7dc      	b.n	80001b2 <main+0x66>
 80001f8:	40021000 	.word	0x40021000
 80001fc:	40021018 	.word	0x40021018
 8000200:	40021004 	.word	0x40021004
 8000204:	40010804 	.word	0x40010804
 8000208:	4001080c 	.word	0x4001080c

0800020c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000210:	bf00      	nop
 8000212:	46bd      	mov	sp, r7
 8000214:	bc80      	pop	{r7}
 8000216:	4770      	bx	lr

08000218 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800021c:	e7fe      	b.n	800021c <HardFault_Handler+0x4>

0800021e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800021e:	b480      	push	{r7}
 8000220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000222:	e7fe      	b.n	8000222 <MemManage_Handler+0x4>

08000224 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000228:	e7fe      	b.n	8000228 <BusFault_Handler+0x4>

0800022a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800022a:	b480      	push	{r7}
 800022c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800022e:	e7fe      	b.n	800022e <UsageFault_Handler+0x4>

08000230 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000234:	bf00      	nop
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr

0800023c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000240:	bf00      	nop
 8000242:	46bd      	mov	sp, r7
 8000244:	bc80      	pop	{r7}
 8000246:	4770      	bx	lr

08000248 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr

08000254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000258:	f000 f82e 	bl	80002b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800025c:	bf00      	nop
 800025e:	bd80      	pop	{r7, pc}

08000260 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr

0800026c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800026c:	480c      	ldr	r0, [pc, #48]	; (80002a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800026e:	490d      	ldr	r1, [pc, #52]	; (80002a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000270:	4a0d      	ldr	r2, [pc, #52]	; (80002a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000274:	e002      	b.n	800027c <LoopCopyDataInit>

08000276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800027a:	3304      	adds	r3, #4

0800027c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800027c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800027e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000280:	d3f9      	bcc.n	8000276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000282:	4a0a      	ldr	r2, [pc, #40]	; (80002ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000284:	4c0a      	ldr	r4, [pc, #40]	; (80002b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000288:	e001      	b.n	800028e <LoopFillZerobss>

0800028a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800028a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800028c:	3204      	adds	r2, #4

0800028e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800028e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000290:	d3fb      	bcc.n	800028a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000292:	f7ff ffe5 	bl	8000260 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000296:	f000 f821 	bl	80002dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800029a:	f7ff ff57 	bl	800014c <main>
  bx lr
 800029e:	4770      	bx	lr
  ldr r0, =_sdata
 80002a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80002a8:	08000344 	.word	0x08000344
  ldr r2, =_sbss
 80002ac:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80002b0:	20000024 	.word	0x20000024

080002b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b4:	e7fe      	b.n	80002b4 <ADC1_2_IRQHandler>
	...

080002b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002bc:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <HAL_IncTick+0x1c>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	461a      	mov	r2, r3
 80002c2:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <HAL_IncTick+0x20>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4413      	add	r3, r2
 80002c8:	4a03      	ldr	r2, [pc, #12]	; (80002d8 <HAL_IncTick+0x20>)
 80002ca:	6013      	str	r3, [r2, #0]
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	20000000 	.word	0x20000000
 80002d8:	20000020 	.word	0x20000020

080002dc <__libc_init_array>:
 80002dc:	b570      	push	{r4, r5, r6, lr}
 80002de:	2500      	movs	r5, #0
 80002e0:	4e0c      	ldr	r6, [pc, #48]	; (8000314 <__libc_init_array+0x38>)
 80002e2:	4c0d      	ldr	r4, [pc, #52]	; (8000318 <__libc_init_array+0x3c>)
 80002e4:	1ba4      	subs	r4, r4, r6
 80002e6:	10a4      	asrs	r4, r4, #2
 80002e8:	42a5      	cmp	r5, r4
 80002ea:	d109      	bne.n	8000300 <__libc_init_array+0x24>
 80002ec:	f000 f81a 	bl	8000324 <_init>
 80002f0:	2500      	movs	r5, #0
 80002f2:	4e0a      	ldr	r6, [pc, #40]	; (800031c <__libc_init_array+0x40>)
 80002f4:	4c0a      	ldr	r4, [pc, #40]	; (8000320 <__libc_init_array+0x44>)
 80002f6:	1ba4      	subs	r4, r4, r6
 80002f8:	10a4      	asrs	r4, r4, #2
 80002fa:	42a5      	cmp	r5, r4
 80002fc:	d105      	bne.n	800030a <__libc_init_array+0x2e>
 80002fe:	bd70      	pop	{r4, r5, r6, pc}
 8000300:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000304:	4798      	blx	r3
 8000306:	3501      	adds	r5, #1
 8000308:	e7ee      	b.n	80002e8 <__libc_init_array+0xc>
 800030a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800030e:	4798      	blx	r3
 8000310:	3501      	adds	r5, #1
 8000312:	e7f2      	b.n	80002fa <__libc_init_array+0x1e>
 8000314:	0800033c 	.word	0x0800033c
 8000318:	0800033c 	.word	0x0800033c
 800031c:	0800033c 	.word	0x0800033c
 8000320:	08000340 	.word	0x08000340

08000324 <_init>:
 8000324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000326:	bf00      	nop
 8000328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032a:	bc08      	pop	{r3}
 800032c:	469e      	mov	lr, r3
 800032e:	4770      	bx	lr

08000330 <_fini>:
 8000330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000332:	bf00      	nop
 8000334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000336:	bc08      	pop	{r3}
 8000338:	469e      	mov	lr, r3
 800033a:	4770      	bx	lr
