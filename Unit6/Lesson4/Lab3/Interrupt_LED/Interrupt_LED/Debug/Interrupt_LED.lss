
Interrupt_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000148  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a5  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000591  00000000  00000000  000008e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a3  00000000  00000000  00000e76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  0000111c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000371  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  00001535  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000170f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a	; 0x8a <__vector_1>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_2>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/interrupt.h>
#include <util/delay.h>
int main(void)
{
	//GICR |= 0xC1;
	GICR |= 0xE0;
  6c:	8b b7       	in	r24, 0x3b	; 59
  6e:	80 6e       	ori	r24, 0xE0	; 224
  70:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= 0xD;
  72:	85 b7       	in	r24, 0x35	; 53
  74:	8d 60       	ori	r24, 0x0D	; 13
  76:	85 bf       	out	0x35, r24	; 53
	MCUCSR |= (0<<6);
  78:	84 b7       	in	r24, 0x34	; 52
  7a:	84 bf       	out	0x34, r24	; 52
	sei();
  7c:	78 94       	sei
	DDRD |= 0b11100000 ;
  7e:	81 b3       	in	r24, 0x11	; 17
  80:	80 6e       	ori	r24, 0xE0	; 224
  82:	81 bb       	out	0x11, r24	; 17
	DDRB |=0;
  84:	87 b3       	in	r24, 0x17	; 23
  86:	87 bb       	out	0x17, r24	; 23
  88:	ff cf       	rjmp	.-2      	; 0x88 <main+0x1c>

0000008a <__vector_1>:
    /* Replace with your application code */
    while (1) ;
}

ISR (INT0_vect) 
{
  8a:	1f 92       	push	r1
  8c:	0f 92       	push	r0
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	0f 92       	push	r0
  92:	11 24       	eor	r1, r1
  94:	2f 93       	push	r18
  96:	8f 93       	push	r24
  98:	9f 93       	push	r25
	PORTD |= (1<<5);
  9a:	82 b3       	in	r24, 0x12	; 18
  9c:	80 62       	ori	r24, 0x20	; 32
  9e:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f e7       	ldi	r18, 0x7F	; 127
  a2:	84 e8       	ldi	r24, 0x84	; 132
  a4:	9e e1       	ldi	r25, 0x1E	; 30
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <__vector_1+0x1c>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <__vector_1+0x26>
  b0:	00 00       	nop
	_delay_ms(10000);
	PORTD &= ~(1<<5);
  b2:	82 b3       	in	r24, 0x12	; 18
  b4:	8f 7d       	andi	r24, 0xDF	; 223
  b6:	82 bb       	out	0x12, r24	; 18
	
}
  b8:	9f 91       	pop	r25
  ba:	8f 91       	pop	r24
  bc:	2f 91       	pop	r18
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

000000c8 <__vector_2>:
ISR (INT1_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
	PORTD |= (1<<6);
  d8:	82 b3       	in	r24, 0x12	; 18
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	82 bb       	out	0x12, r24	; 18
  de:	2f e7       	ldi	r18, 0x7F	; 127
  e0:	84 e8       	ldi	r24, 0x84	; 132
  e2:	9e e1       	ldi	r25, 0x1E	; 30
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <__vector_2+0x1c>
  ec:	00 c0       	rjmp	.+0      	; 0xee <__vector_2+0x26>
  ee:	00 00       	nop
	_delay_ms(10000);
	PORTD &= ~(1<<6);
  f0:	82 b3       	in	r24, 0x12	; 18
  f2:	8f 7b       	andi	r24, 0xBF	; 191
  f4:	82 bb       	out	0x12, r24	; 18
}
  f6:	9f 91       	pop	r25
  f8:	8f 91       	pop	r24
  fa:	2f 91       	pop	r18
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <__vector_3>:
ISR (INT2_vect)
{
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	2f 93       	push	r18
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
	PORTD |=(1<<7);
 116:	82 b3       	in	r24, 0x12	; 18
 118:	80 68       	ori	r24, 0x80	; 128
 11a:	82 bb       	out	0x12, r24	; 18
 11c:	2f e7       	ldi	r18, 0x7F	; 127
 11e:	84 e8       	ldi	r24, 0x84	; 132
 120:	9e e1       	ldi	r25, 0x1E	; 30
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <__vector_3+0x1c>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <__vector_3+0x26>
 12c:	00 00       	nop
	_delay_ms(10000);
	PORTD &= ~(1<<7);
 12e:	82 b3       	in	r24, 0x12	; 18
 130:	8f 77       	andi	r24, 0x7F	; 127
 132:	82 bb       	out	0x12, r24	; 18
 134:	9f 91       	pop	r25
 136:	8f 91       	pop	r24
 138:	2f 91       	pop	r18
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
