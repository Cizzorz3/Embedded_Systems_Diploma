
Learn_In_depth_Amit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000240  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000240  000002b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a81  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000712  00000000  00000000  00000e31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000506  00000000  00000000  00001543  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00001a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bb  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000347  00000000  00000000  00001ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000223a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 0a 01 	call	0x214	; 0x214 <main>
  7a:	0c 94 1e 01 	jmp	0x23c	; 0x23c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <gpio_init>:
#define FOUR_BIT_MODE
void gpio_init(void)
{
	
	//setting PORTA as output
	DDRA = 0xff;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	8a bb       	out	0x1a, r24	; 26
	//Setting PORTB Pins 1 ,2,3 as outputs
	DDRB |= (0b111<<1);
  86:	87 b3       	in	r24, 0x17	; 23
  88:	8e 60       	ori	r24, 0x0E	; 14
  8a:	87 bb       	out	0x17, r24	; 23
  8c:	08 95       	ret

0000008e <LCD_Enable_Function>:
}

void LCD_Enable_Function(void)
{
	//Disabling the enable pin
	LCD_CTRL_PORT &=~ (1<<LCD_ENABLE);
  8e:	88 b3       	in	r24, 0x18	; 24
  90:	87 7f       	andi	r24, 0xF7	; 247
  92:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	8f e0       	ldi	r24, 0x0F	; 15
  96:	97 e2       	ldi	r25, 0x27	; 39
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <LCD_Enable_Function+0xa>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <LCD_Enable_Function+0x10>
  9e:	00 00       	nop
	//Delay till the enable cycle time reaches 500ns
	_delay_ms(40);
	//Enabling the LCD enable pin
	LCD_CTRL_PORT |= (1<<LCD_ENABLE) ;
  a0:	88 b3       	in	r24, 0x18	; 24
  a2:	88 60       	ori	r24, 0x08	; 8
  a4:	88 bb       	out	0x18, r24	; 24
  a6:	08 95       	ret

000000a8 <LCD_Write>:
	
	
}

void LCD_Write(unsigned char Data)
{
  a8:	cf 93       	push	r28
  aa:	c8 2f       	mov	r28, r24
	PORTB &=~(1<<LCD_RW);
	_delay_ms(1);
	LCD_Enable_Function();
	#endif
	#ifdef FOUR_BIT_MODE
	PORTA= (Data & 0xF0);
  ac:	80 7f       	andi	r24, 0xF0	; 240
  ae:	8b bb       	out	0x1b, r24	; 27
	PORTB |= (1<<LCD_RS);
  b0:	88 b3       	in	r24, 0x18	; 24
  b2:	82 60       	ori	r24, 0x02	; 2
  b4:	88 bb       	out	0x18, r24	; 24
	//Clearing the RW
	PORTB &=~(1<<LCD_RW);
  b6:	88 b3       	in	r24, 0x18	; 24
  b8:	8b 7f       	andi	r24, 0xFB	; 251
  ba:	88 bb       	out	0x18, r24	; 24
	LCD_Enable_Function();
  bc:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_Enable_Function>
	LCD_DATA= (Data << 4);
  c0:	c2 95       	swap	r28
  c2:	c0 7f       	andi	r28, 0xF0	; 240
  c4:	cb bb       	out	0x1b, r28	; 27
	PORTB |= (1<<LCD_RS);
  c6:	88 b3       	in	r24, 0x18	; 24
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	88 bb       	out	0x18, r24	; 24
	//Clearing the RW
	PORTB &=~(1<<LCD_RW);
  cc:	88 b3       	in	r24, 0x18	; 24
  ce:	8b 7f       	andi	r24, 0xFB	; 251
  d0:	88 bb       	out	0x18, r24	; 24
	LCD_Enable_Function();
  d2:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_Enable_Function>
	#endif

}
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <is_busy>:
	LCD_CTRL_PORT |= (1<<LCD_ENABLE) ;
}

void is_busy(void)
{
	LCD_DATA_Dir  &=~(0xff<<4);
  da:	8a b3       	in	r24, 0x1a	; 26
  dc:	8f 70       	andi	r24, 0x0F	; 15
  de:	8a bb       	out	0x1a, r24	; 26
	 //setting the PORT A as input
	 LCD_DATA_Dir = 0x00;
  e0:	1a ba       	out	0x1a, r1	; 26
	 //Put the LCD in read mode (RW on)
	 LCD_CTRL_PORT |= (1<<LCD_RW) ;
  e2:	88 b3       	in	r24, 0x18	; 24
  e4:	84 60       	ori	r24, 0x04	; 4
  e6:	88 bb       	out	0x18, r24	; 24
	 //put the LCD in command mode (RS off)
	 LCD_CTRL_PORT &=~ (1<<LCD_RS);
  e8:	88 b3       	in	r24, 0x18	; 24
  ea:	8d 7f       	andi	r24, 0xFD	; 253
  ec:	88 bb       	out	0x18, r24	; 24
	 LCD_Enable_Function();
  ee:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_Enable_Function>
	 //setting PORT A as output
	 LCD_DATA_Dir = 0xff;
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	8a bb       	out	0x1a, r24	; 26
	 //Disable read mode
	 LCD_CTRL_PORT &=~ (1<<LCD_RW);
  f6:	88 b3       	in	r24, 0x18	; 24
  f8:	8b 7f       	andi	r24, 0xFB	; 251
  fa:	88 bb       	out	0x18, r24	; 24
  fc:	08 95       	ret

000000fe <LCD_CMD>:
	//Setting PORTB Pins 1 ,2,3 as outputs
	DDRB |= (0b111<<1);
}

void LCD_CMD(unsigned char cmd)
{
  fe:	cf 93       	push	r28
 100:	c8 2f       	mov	r28, r24
	is_busy();
 102:	0e 94 6d 00 	call	0xda	; 0xda <is_busy>
	//2-Initialize RW with 0
	PORTB &= ~ (1<<LCD_RW);
	LCD_Enable_Function();
	#endif
	#ifdef FOUR_BIT_MODE
	PORTA= (LCD_DATA & 0x0f) | (cmd & 0xf0);
 106:	8b b3       	in	r24, 0x1b	; 27
 108:	8f 70       	andi	r24, 0x0F	; 15
 10a:	9c 2f       	mov	r25, r28
 10c:	90 7f       	andi	r25, 0xF0	; 240
 10e:	89 2b       	or	r24, r25
 110:	8b bb       	out	0x1b, r24	; 27
	//1-Initialize reset with 0
	PORTB &= ~ (1<<LCD_RS);
 112:	88 b3       	in	r24, 0x18	; 24
 114:	8d 7f       	andi	r24, 0xFD	; 253
 116:	88 bb       	out	0x18, r24	; 24
	//2-Initialize RW with 0
	PORTB &= ~ (1<<LCD_RW);
 118:	88 b3       	in	r24, 0x18	; 24
 11a:	8b 7f       	andi	r24, 0xFB	; 251
 11c:	88 bb       	out	0x18, r24	; 24
	LCD_Enable_Function();
 11e:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_Enable_Function>
	LCD_DATA= (LCD_DATA & 0x0f) | (cmd << 4);
 122:	2b b3       	in	r18, 0x1b	; 27
 124:	30 e1       	ldi	r19, 0x10	; 16
 126:	c3 9f       	mul	r28, r19
 128:	c0 01       	movw	r24, r0
 12a:	11 24       	eor	r1, r1
 12c:	92 2f       	mov	r25, r18
 12e:	9f 70       	andi	r25, 0x0F	; 15
 130:	89 2b       	or	r24, r25
 132:	8b bb       	out	0x1b, r24	; 27
	//1-Initialize reset with 0
	PORTB &= ~ (1<<LCD_RS);
 134:	88 b3       	in	r24, 0x18	; 24
 136:	8d 7f       	andi	r24, 0xFD	; 253
 138:	88 bb       	out	0x18, r24	; 24
	//2-Initialize RW with 0
	PORTB &= ~ (1<<LCD_RW);
 13a:	88 b3       	in	r24, 0x18	; 24
 13c:	8b 7f       	andi	r24, 0xFB	; 251
 13e:	88 bb       	out	0x18, r24	; 24
	LCD_Enable_Function();
 140:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_Enable_Function>
	
	#endif
	
	
}
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <clear_screen>:

}

void clear_screen(void)
{
	LCD_CMD(LCD_CLEAR_SCREEN);
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_CMD>
 14e:	08 95       	ret

00000150 <LCD_init>:
	
}

void LCD_init(void)
{
	is_busy();
 150:	0e 94 6d 00 	call	0xda	; 0xda <is_busy>
 154:	87 e8       	ldi	r24, 0x87	; 135
 156:	93 e1       	ldi	r25, 0x13	; 19
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCD_init+0x8>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <LCD_init+0xe>
 15e:	00 00       	nop
	//wait for more than 15ms after VCC reaches 4.5V
	_delay_ms(20);
	LCD_CMD(0x0C);
 160:	8c e0       	ldi	r24, 0x0C	; 12
 162:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_CMD>
 166:	87 e8       	ldi	r24, 0x87	; 135
 168:	93 e1       	ldi	r25, 0x13	; 19
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <LCD_init+0x1a>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCD_init+0x20>
 170:	00 00       	nop
	//Initiallize the LCD as 16*2 LCD 8 bit mode
	LCD_CMD(0x38);
	_delay_ms(1);
	#endif
	#ifdef FOUR_BIT_MODE
	LCD_CMD(LCD_Return_home);
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_CMD>
	LCD_CMD(LCD_FUNCTION_4BIT_2LINES);
 178:	88 e2       	ldi	r24, 0x28	; 40
 17a:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_CMD>
	#endif
	
	LCD_CMD(LCD_DISP_ON_CURSOR_BLINK);
 17e:	8f e0       	ldi	r24, 0x0F	; 15
 180:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_CMD>
	clear_screen();
 184:	0e 94 a4 00 	call	0x148	; 0x148 <clear_screen>
 188:	87 ea       	ldi	r24, 0xA7	; 167
 18a:	91 e6       	ldi	r25, 0x61	; 97
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <LCD_init+0x3c>
 190:	00 c0       	rjmp	.+0      	; 0x192 <LCD_init+0x42>
 192:	00 00       	nop
	_delay_ms(100);
	LCD_CMD(LCD_ENTRY_DEC);
 194:	84 e0       	ldi	r24, 0x04	; 4
 196:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_CMD>
 19a:	08 95       	ret

0000019c <LCD_XY>:
	}
}

void LCD_XY(int row , int col)
{
	if(row ==1)
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	91 05       	cpc	r25, r1
 1a0:	29 f4       	brne	.+10     	; 0x1ac <LCD_XY+0x10>
	{
		LCD_CMD(LCD_BEGIN_AT_FIRST_ROW+col)	;
 1a2:	80 e8       	ldi	r24, 0x80	; 128
 1a4:	86 0f       	add	r24, r22
 1a6:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_CMD>
 1aa:	08 95       	ret
	}
	else if(row ==2)
 1ac:	02 97       	sbiw	r24, 0x02	; 2
 1ae:	21 f4       	brne	.+8      	; 0x1b8 <LCD_XY+0x1c>
	{
		LCD_CMD(LCD_BEGIN_AT_SECOND_ROW+col);
 1b0:	80 ec       	ldi	r24, 0xC0	; 192
 1b2:	86 0f       	add	r24, r22
 1b4:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_CMD>
 1b8:	08 95       	ret

000001ba <Send_string>:
{
	LCD_CMD(LCD_CLEAR_SCREEN);
}

void Send_string(char * data)
{
 1ba:	0f 93       	push	r16
 1bc:	1f 93       	push	r17
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	8c 01       	movw	r16, r24
	int count = 0 ;
 1c4:	c0 e0       	ldi	r28, 0x00	; 0
 1c6:	d0 e0       	ldi	r29, 0x00	; 0
	while(*data != 0)
 1c8:	1c c0       	rjmp	.+56     	; 0x202 <Send_string+0x48>
	{
		count++;
 1ca:	21 96       	adiw	r28, 0x01	; 1
		LCD_Write(*data++);
 1cc:	0f 5f       	subi	r16, 0xFF	; 255
 1ce:	1f 4f       	sbci	r17, 0xFF	; 255
 1d0:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD_Write>
		//LCD can only hold 16 char in one line
		if(count ==16)
 1d4:	c0 31       	cpi	r28, 0x10	; 16
 1d6:	d1 05       	cpc	r29, r1
 1d8:	39 f4       	brne	.+14     	; 0x1e8 <Send_string+0x2e>
		{
			LCD_XY(2,0);
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_XY>
 1e6:	0d c0       	rjmp	.+26     	; 0x202 <Send_string+0x48>
		}
		//if the two lines are  full
		else if(count ==32)
 1e8:	c0 32       	cpi	r28, 0x20	; 32
 1ea:	d1 05       	cpc	r29, r1
 1ec:	51 f4       	brne	.+20     	; 0x202 <Send_string+0x48>
		{
			//clear the screen
			clear_screen();
 1ee:	0e 94 a4 00 	call	0x148	; 0x148 <clear_screen>
			//go to the first line
			LCD_XY(1,0);
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	70 e0       	ldi	r23, 0x00	; 0
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_XY>
			count = 0;
 1fe:	c0 e0       	ldi	r28, 0x00	; 0
 200:	d0 e0       	ldi	r29, 0x00	; 0
}

void Send_string(char * data)
{
	int count = 0 ;
	while(*data != 0)
 202:	f8 01       	movw	r30, r16
 204:	80 81       	ld	r24, Z
 206:	81 11       	cpse	r24, r1
 208:	e0 cf       	rjmp	.-64     	; 0x1ca <Send_string+0x10>
			//go to the first line
			LCD_XY(1,0);
			count = 0;
		}
	}
}
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	1f 91       	pop	r17
 210:	0f 91       	pop	r16
 212:	08 95       	ret

00000214 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "LCD.h"
int main(void)
{
	gpio_init();
 214:	0e 94 41 00 	call	0x82	; 0x82 <gpio_init>
	LCD_init();
 218:	0e 94 a8 00 	call	0x150	; 0x150 <LCD_init>
    /* Replace with your application code */
    while (1) 
    {
		Send_string("Learn In Depth");
 21c:	80 e6       	ldi	r24, 0x60	; 96
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 dd 00 	call	0x1ba	; 0x1ba <Send_string>
 224:	2f e3       	ldi	r18, 0x3F	; 63
 226:	8d e0       	ldi	r24, 0x0D	; 13
 228:	93 e0       	ldi	r25, 0x03	; 3
 22a:	21 50       	subi	r18, 0x01	; 1
 22c:	80 40       	sbci	r24, 0x00	; 0
 22e:	90 40       	sbci	r25, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <main+0x16>
 232:	00 c0       	rjmp	.+0      	; 0x234 <main+0x20>
 234:	00 00       	nop
		_delay_ms(1000);
		clear_screen();
 236:	0e 94 a4 00 	call	0x148	; 0x148 <clear_screen>
 23a:	f0 cf       	rjmp	.-32     	; 0x21c <main+0x8>

0000023c <_exit>:
 23c:	f8 94       	cli

0000023e <__stop_program>:
 23e:	ff cf       	rjmp	.-2      	; 0x23e <__stop_program>
