
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ad  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000556  00000000  00000000  00000775  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000209  00000000  00000000  00000ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f5  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004c  00000000  00000000  0000120d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001259  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <IO_init>:
{
	uint32_t i , j;
	for(i=0;i<p;i++){
		for(j=0;j<255;j++);
	}
}
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	92 b3       	in	r25, 0x12	; 18
  70:	80 6f       	ori	r24, 0xF0	; 240
  72:	92 bb       	out	0x12, r25	; 18
  74:	81 bb       	out	0x11, r24	; 17
  76:	13 ba       	out	0x13, r1	; 19
  78:	12 ba       	out	0x12, r1	; 18
  7a:	08 95       	ret

0000007c <main>:

int main(void)
{
	IO_init();
  7c:	0e 94 36 00 	call	0x6c	; 0x6c <IO_init>
    /* Replace with your application code */
    while (1) 
    {
		//setting PD.5
		PORTD_IO |= (1<<5);
  80:	82 b3       	in	r24, 0x12	; 18
  82:	93 b3       	in	r25, 0x13	; 19
  84:	80 62       	ori	r24, 0x20	; 32
  86:	93 bb       	out	0x13, r25	; 19
  88:	82 bb       	out	0x12, r24	; 18
		//wait for 3 seconds
		delay_ms(3000);
		//clearing PD.5
		PORTD_IO &= ~(1<<5);
  8a:	82 b3       	in	r24, 0x12	; 18
  8c:	93 b3       	in	r25, 0x13	; 19
  8e:	8f 7d       	andi	r24, 0xDF	; 223
  90:	93 bb       	out	0x13, r25	; 19
  92:	82 bb       	out	0x12, r24	; 18
		//setting PD.6
		PORTD_IO |= (1<<6);
  94:	82 b3       	in	r24, 0x12	; 18
  96:	93 b3       	in	r25, 0x13	; 19
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	93 bb       	out	0x13, r25	; 19
  9c:	82 bb       	out	0x12, r24	; 18
		delay_ms(3000);
		//clearing PD.6
		PORTD_IO &= ~(1<<6);
  9e:	82 b3       	in	r24, 0x12	; 18
  a0:	93 b3       	in	r25, 0x13	; 19
  a2:	8f 7b       	andi	r24, 0xBF	; 191
  a4:	93 bb       	out	0x13, r25	; 19
  a6:	82 bb       	out	0x12, r24	; 18
		//setting PD.7
		PORTD_IO |= (1<<7);
  a8:	82 b3       	in	r24, 0x12	; 18
  aa:	93 b3       	in	r25, 0x13	; 19
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	93 bb       	out	0x13, r25	; 19
  b0:	82 bb       	out	0x12, r24	; 18
		delay_ms(3000);
		//clearing PD.7
		PORTD_IO &= ~(1<<7);
  b2:	82 b3       	in	r24, 0x12	; 18
  b4:	93 b3       	in	r25, 0x13	; 19
  b6:	8f 77       	andi	r24, 0x7F	; 127
  b8:	93 bb       	out	0x13, r25	; 19
  ba:	82 bb       	out	0x12, r24	; 18
		//Enabling buzzer at PD.4
		PORTD_IO |= (1<<4);
  bc:	82 b3       	in	r24, 0x12	; 18
  be:	93 b3       	in	r25, 0x13	; 19
  c0:	80 61       	ori	r24, 0x10	; 16
  c2:	93 bb       	out	0x13, r25	; 19
  c4:	82 bb       	out	0x12, r24	; 18
		delay_ms(3000);
		//disabling buzzer at PD.4
		PORTD_IO &= ~(1<<4);
  c6:	82 b3       	in	r24, 0x12	; 18
  c8:	93 b3       	in	r25, 0x13	; 19
  ca:	8f 7e       	andi	r24, 0xEF	; 239
  cc:	93 bb       	out	0x13, r25	; 19
  ce:	82 bb       	out	0x12, r24	; 18
  d0:	d7 cf       	rjmp	.-82     	; 0x80 <main+0x4>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
