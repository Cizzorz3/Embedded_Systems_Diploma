
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003d0  080003d0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003d0  080003d0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003d0  080003d0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003d0  080003d0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003d0  080003d0  000103d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003d4  080003d4  000103d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003d8  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080003dc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003dc  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000dac  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000470  00000000  00000000  00020dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a34  00000000  00000000  00021249  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001c8  00000000  00000000  00021c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000180  00000000  00000000  00021e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000f74  00000000  00000000  00021fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000017b5  00000000  00000000  00022f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00078da0  00000000  00000000  000246f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0009d491  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000558  00000000  00000000  0009d50c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080003b8 	.word	0x080003b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080003b8 	.word	0x080003b8

0800014c <gpio_init>:
//Clock configurations
#define RCC_Base   0x40021000
#define RCC_APB2ENR *(volatile unsigned int *)(RCC_Base+0x18)

void gpio_init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	//Resetting all the values of the CRL registers
	GPIOA_CRL =0;
 8000150:	4b1b      	ldr	r3, [pc, #108]	; (80001c0 <gpio_init+0x74>)
 8000152:	2200      	movs	r2, #0
 8000154:	601a      	str	r2, [r3, #0]
	GPIOB_CRL =0;
 8000156:	4b1b      	ldr	r3, [pc, #108]	; (80001c4 <gpio_init+0x78>)
 8000158:	2200      	movs	r2, #0
 800015a:	601a      	str	r2, [r3, #0]
	//PA 1  CNF1 as a floating input
	GPIOA_CRL |= (0b01<<6);
 800015c:	4b18      	ldr	r3, [pc, #96]	; (80001c0 <gpio_init+0x74>)
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	4a17      	ldr	r2, [pc, #92]	; (80001c0 <gpio_init+0x74>)
 8000162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000166:	6013      	str	r3, [r2, #0]
	//PA 1  Mode1 as a input mode
	GPIOA_CRL |= (0b00<<4);
 8000168:	4b15      	ldr	r3, [pc, #84]	; (80001c0 <gpio_init+0x74>)
 800016a:	4a15      	ldr	r2, [pc, #84]	; (80001c0 <gpio_init+0x74>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	6013      	str	r3, [r2, #0]
	//PB 1  Mode1 as a output with max 10MHZ
	GPIOB_CRL |= (0b01<<4);
 8000170:	4b14      	ldr	r3, [pc, #80]	; (80001c4 <gpio_init+0x78>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	4a13      	ldr	r2, [pc, #76]	; (80001c4 <gpio_init+0x78>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6013      	str	r3, [r2, #0]
	//PB 1  CNF1 as a push pull output
	GPIOB_CRL |= (0b00<<6);
 800017c:	4b11      	ldr	r3, [pc, #68]	; (80001c4 <gpio_init+0x78>)
 800017e:	4a11      	ldr	r2, [pc, #68]	; (80001c4 <gpio_init+0x78>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	6013      	str	r3, [r2, #0]

	//Resetting all the values of the CRH registers
	GPIOA_CRH=0;
 8000184:	4b10      	ldr	r3, [pc, #64]	; (80001c8 <gpio_init+0x7c>)
 8000186:	2200      	movs	r2, #0
 8000188:	601a      	str	r2, [r3, #0]
	GPIOB_CRH =0;
 800018a:	4b10      	ldr	r3, [pc, #64]	; (80001cc <gpio_init+0x80>)
 800018c:	2200      	movs	r2, #0
 800018e:	601a      	str	r2, [r3, #0]
	//PA 13  CNF13 as a floating input
	GPIOA_CRH |= (0b01<<22);
 8000190:	4b0d      	ldr	r3, [pc, #52]	; (80001c8 <gpio_init+0x7c>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a0c      	ldr	r2, [pc, #48]	; (80001c8 <gpio_init+0x7c>)
 8000196:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800019a:	6013      	str	r3, [r2, #0]
	//PA 1  Mode13 as a  input mode
	GPIOA_CRH |= (0b00<<20);
 800019c:	4b0a      	ldr	r3, [pc, #40]	; (80001c8 <gpio_init+0x7c>)
 800019e:	4a0a      	ldr	r2, [pc, #40]	; (80001c8 <gpio_init+0x7c>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	6013      	str	r3, [r2, #0]
	//PB 13  CNF13 as a output with max 10MHZ
	GPIOB_CRH |= (0b00<<22);
 80001a4:	4b09      	ldr	r3, [pc, #36]	; (80001cc <gpio_init+0x80>)
 80001a6:	4a09      	ldr	r2, [pc, #36]	; (80001cc <gpio_init+0x80>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	6013      	str	r3, [r2, #0]
	//PB 13  Mode13 as a push pull output
	GPIOB_CRH |= (0b01<<20);
 80001ac:	4b07      	ldr	r3, [pc, #28]	; (80001cc <gpio_init+0x80>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a06      	ldr	r2, [pc, #24]	; (80001cc <gpio_init+0x80>)
 80001b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001b6:	6013      	str	r3, [r2, #0]

}
 80001b8:	bf00      	nop
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr
 80001c0:	40010800 	.word	0x40010800
 80001c4:	40010c00 	.word	0x40010c00
 80001c8:	40010804 	.word	0x40010804
 80001cc:	40010c04 	.word	0x40010c04

080001d0 <clock_init>:

void clock_init(void)
{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	//Enabling the clock
	RCC_APB2ENR |= (1<<2);
 80001d4:	4b07      	ldr	r3, [pc, #28]	; (80001f4 <clock_init+0x24>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a06      	ldr	r2, [pc, #24]	; (80001f4 <clock_init+0x24>)
 80001da:	f043 0304 	orr.w	r3, r3, #4
 80001de:	6013      	str	r3, [r2, #0]
	RCC_APB2ENR |=(1<<3);
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <clock_init+0x24>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a03      	ldr	r2, [pc, #12]	; (80001f4 <clock_init+0x24>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	40021018 	.word	0x40021018

080001f8 <delay_ms>:

void delay_ms(unsigned int p)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b085      	sub	sp, #20
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
	//delay function
	unsigned int i ,j;
	for(i=0;i<p;i++ ){
 8000200:	2300      	movs	r3, #0
 8000202:	60fb      	str	r3, [r7, #12]
 8000204:	e00c      	b.n	8000220 <delay_ms+0x28>
		for(j=0;j<p;j++);
 8000206:	2300      	movs	r3, #0
 8000208:	60bb      	str	r3, [r7, #8]
 800020a:	e002      	b.n	8000212 <delay_ms+0x1a>
 800020c:	68bb      	ldr	r3, [r7, #8]
 800020e:	3301      	adds	r3, #1
 8000210:	60bb      	str	r3, [r7, #8]
 8000212:	68ba      	ldr	r2, [r7, #8]
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	429a      	cmp	r2, r3
 8000218:	d3f8      	bcc.n	800020c <delay_ms+0x14>
	for(i=0;i<p;i++ ){
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	3301      	adds	r3, #1
 800021e:	60fb      	str	r3, [r7, #12]
 8000220:	68fa      	ldr	r2, [r7, #12]
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	429a      	cmp	r2, r3
 8000226:	d3ee      	bcc.n	8000206 <delay_ms+0xe>
	}
}
 8000228:	bf00      	nop
 800022a:	3714      	adds	r7, #20
 800022c:	46bd      	mov	sp, r7
 800022e:	bc80      	pop	{r7}
 8000230:	4770      	bx	lr
	...

08000234 <main>:
int main ()
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	clock_init();
 8000238:	f7ff ffca 	bl	80001d0 <clock_init>
	gpio_init();
 800023c:	f7ff ff86 	bl	800014c <gpio_init>

	while(1)
		{
			if ((GPIOA_IDR &(1<<1))==0)
 8000240:	4b15      	ldr	r3, [pc, #84]	; (8000298 <main+0x64>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f003 0302 	and.w	r3, r3, #2
 8000248:	2b00      	cmp	r3, #0
 800024a:	d10c      	bne.n	8000266 <main+0x32>
			{
				GPIOB_ODR ^= (1<<1);
 800024c:	4b13      	ldr	r3, [pc, #76]	; (800029c <main+0x68>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a12      	ldr	r2, [pc, #72]	; (800029c <main+0x68>)
 8000252:	f083 0302 	eor.w	r3, r3, #2
 8000256:	6013      	str	r3, [r2, #0]
				while ((GPIOA_IDR & (1<<1))== 0);
 8000258:	bf00      	nop
 800025a:	4b0f      	ldr	r3, [pc, #60]	; (8000298 <main+0x64>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f003 0302 	and.w	r3, r3, #2
 8000262:	2b00      	cmp	r3, #0
 8000264:	d0f9      	beq.n	800025a <main+0x26>
			}
			if (((GPIOA_IDR & (1<<13))>>13) == 1)
 8000266:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <main+0x64>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	0b5b      	lsrs	r3, r3, #13
 800026c:	f003 0301 	and.w	r3, r3, #1
 8000270:	2b01      	cmp	r3, #1
 8000272:	d1e5      	bne.n	8000240 <main+0xc>
					{
						while(((GPIOA_IDR & (1<<13))>>13) == 1)
 8000274:	e008      	b.n	8000288 <main+0x54>
						{
							GPIOB_ODR ^= (1<<13);
 8000276:	4b09      	ldr	r3, [pc, #36]	; (800029c <main+0x68>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4a08      	ldr	r2, [pc, #32]	; (800029c <main+0x68>)
 800027c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000280:	6013      	str	r3, [r2, #0]
							delay_ms(1);
 8000282:	2001      	movs	r0, #1
 8000284:	f7ff ffb8 	bl	80001f8 <delay_ms>
						while(((GPIOA_IDR & (1<<13))>>13) == 1)
 8000288:	4b03      	ldr	r3, [pc, #12]	; (8000298 <main+0x64>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	0b5b      	lsrs	r3, r3, #13
 800028e:	f003 0301 	and.w	r3, r3, #1
 8000292:	2b01      	cmp	r3, #1
 8000294:	d0ef      	beq.n	8000276 <main+0x42>
			if ((GPIOA_IDR &(1<<1))==0)
 8000296:	e7d3      	b.n	8000240 <main+0xc>
 8000298:	40010808 	.word	0x40010808
 800029c:	40010c0c 	.word	0x40010c0c

080002a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr

080002ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002b0:	e7fe      	b.n	80002b0 <HardFault_Handler+0x4>

080002b2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002b2:	b480      	push	{r7}
 80002b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002b6:	e7fe      	b.n	80002b6 <MemManage_Handler+0x4>

080002b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002bc:	e7fe      	b.n	80002bc <BusFault_Handler+0x4>

080002be <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002be:	b480      	push	{r7}
 80002c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002c2:	e7fe      	b.n	80002c2 <UsageFault_Handler+0x4>

080002c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr

080002d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr

080002dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr

080002e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002ec:	f000 f82e 	bl	800034c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr

08000300 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000300:	480c      	ldr	r0, [pc, #48]	; (8000334 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000302:	490d      	ldr	r1, [pc, #52]	; (8000338 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000304:	4a0d      	ldr	r2, [pc, #52]	; (800033c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000308:	e002      	b.n	8000310 <LoopCopyDataInit>

0800030a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800030c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030e:	3304      	adds	r3, #4

08000310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000314:	d3f9      	bcc.n	800030a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000316:	4a0a      	ldr	r2, [pc, #40]	; (8000340 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000318:	4c0a      	ldr	r4, [pc, #40]	; (8000344 <LoopFillZerobss+0x22>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800031c:	e001      	b.n	8000322 <LoopFillZerobss>

0800031e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800031e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000320:	3204      	adds	r2, #4

08000322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000324:	d3fb      	bcc.n	800031e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000326:	f7ff ffe5 	bl	80002f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800032a:	f000 f821 	bl	8000370 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032e:	f7ff ff81 	bl	8000234 <main>
  bx lr
 8000332:	4770      	bx	lr
  ldr r0, =_sdata
 8000334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000338:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800033c:	080003d8 	.word	0x080003d8
  ldr r2, =_sbss
 8000340:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000344:	20000024 	.word	0x20000024

08000348 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000348:	e7fe      	b.n	8000348 <ADC1_2_IRQHandler>
	...

0800034c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000350:	4b05      	ldr	r3, [pc, #20]	; (8000368 <HAL_IncTick+0x1c>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	461a      	mov	r2, r3
 8000356:	4b05      	ldr	r3, [pc, #20]	; (800036c <HAL_IncTick+0x20>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4413      	add	r3, r2
 800035c:	4a03      	ldr	r2, [pc, #12]	; (800036c <HAL_IncTick+0x20>)
 800035e:	6013      	str	r3, [r2, #0]
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	20000000 	.word	0x20000000
 800036c:	20000020 	.word	0x20000020

08000370 <__libc_init_array>:
 8000370:	b570      	push	{r4, r5, r6, lr}
 8000372:	2500      	movs	r5, #0
 8000374:	4e0c      	ldr	r6, [pc, #48]	; (80003a8 <__libc_init_array+0x38>)
 8000376:	4c0d      	ldr	r4, [pc, #52]	; (80003ac <__libc_init_array+0x3c>)
 8000378:	1ba4      	subs	r4, r4, r6
 800037a:	10a4      	asrs	r4, r4, #2
 800037c:	42a5      	cmp	r5, r4
 800037e:	d109      	bne.n	8000394 <__libc_init_array+0x24>
 8000380:	f000 f81a 	bl	80003b8 <_init>
 8000384:	2500      	movs	r5, #0
 8000386:	4e0a      	ldr	r6, [pc, #40]	; (80003b0 <__libc_init_array+0x40>)
 8000388:	4c0a      	ldr	r4, [pc, #40]	; (80003b4 <__libc_init_array+0x44>)
 800038a:	1ba4      	subs	r4, r4, r6
 800038c:	10a4      	asrs	r4, r4, #2
 800038e:	42a5      	cmp	r5, r4
 8000390:	d105      	bne.n	800039e <__libc_init_array+0x2e>
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000398:	4798      	blx	r3
 800039a:	3501      	adds	r5, #1
 800039c:	e7ee      	b.n	800037c <__libc_init_array+0xc>
 800039e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003a2:	4798      	blx	r3
 80003a4:	3501      	adds	r5, #1
 80003a6:	e7f2      	b.n	800038e <__libc_init_array+0x1e>
 80003a8:	080003d0 	.word	0x080003d0
 80003ac:	080003d0 	.word	0x080003d0
 80003b0:	080003d0 	.word	0x080003d0
 80003b4:	080003d4 	.word	0x080003d4

080003b8 <_init>:
 80003b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ba:	bf00      	nop
 80003bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003be:	bc08      	pop	{r3}
 80003c0:	469e      	mov	lr, r3
 80003c2:	4770      	bx	lr

080003c4 <_fini>:
 80003c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c6:	bf00      	nop
 80003c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ca:	bc08      	pop	{r3}
 80003cc:	469e      	mov	lr, r3
 80003ce:	4770      	bx	lr
