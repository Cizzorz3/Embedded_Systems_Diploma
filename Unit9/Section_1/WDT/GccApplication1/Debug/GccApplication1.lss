
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000066c  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059f  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026d  00000000  00000000  00000dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000102c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000360  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 42 00 	call	0x84	; 0x84 <main>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <WDT_OFF>:
#define Clear_Bit(reg,bit) (reg &=~ (1<<bit))
#define Toggle_Bit(reg,bit) (reg ^= (1<<bit))
#define Read_Bit(reg,bit) ((reg>>bit)&1)
void WDT_OFF(void)
{
		WDTCR |= (1<<WDTOE) | (1<<WDE);
  6c:	81 b5       	in	r24, 0x21	; 33
  6e:	88 61       	ori	r24, 0x18	; 24
  70:	81 bd       	out	0x21, r24	; 33
		WDTCR = 0x00;
  72:	11 bc       	out	0x21, r1	; 33
  74:	08 95       	ret

00000076 <WDT_ON>:
	
}
void WDT_ON(void)
{
	WDTCR |= (1<<WDE) | (1<<WDP2) | (1<<WDP1);
  76:	81 b5       	in	r24, 0x21	; 33
  78:	8e 60       	ori	r24, 0x0E	; 14
  7a:	81 bd       	out	0x21, r24	; 33
	Clear_Bit(WDTCR,WDP0);
  7c:	81 b5       	in	r24, 0x21	; 33
  7e:	8e 7f       	andi	r24, 0xFE	; 254
  80:	81 bd       	out	0x21, r24	; 33
  82:	08 95       	ret

00000084 <main>:
	
}

int main(void)
{
	Set_Bit(LED_DIR,LED_PIN);
  84:	84 b3       	in	r24, 0x14	; 20
  86:	81 60       	ori	r24, 0x01	; 1
  88:	84 bb       	out	0x14, r24	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	2f e9       	ldi	r18, 0x9F	; 159
  8c:	86 e8       	ldi	r24, 0x86	; 134
  8e:	91 e0       	ldi	r25, 0x01	; 1
  90:	21 50       	subi	r18, 0x01	; 1
  92:	80 40       	sbci	r24, 0x00	; 0
  94:	90 40       	sbci	r25, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <main+0xc>
  98:	00 c0       	rjmp	.+0      	; 0x9a <main+0x16>
  9a:	00 00       	nop
    /* Replace with your application code */
		_delay_ms(500);
    while (1) 
    {
		WDT_ON();
  9c:	0e 94 3b 00 	call	0x76	; 0x76 <WDT_ON>
		Toggle_Bit(LED_PORT,LED_PIN);
  a0:	95 b3       	in	r25, 0x15	; 21
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	89 27       	eor	r24, r25
  a6:	85 bb       	out	0x15, r24	; 21
  a8:	2f e7       	ldi	r18, 0x7F	; 127
  aa:	8a e1       	ldi	r24, 0x1A	; 26
  ac:	96 e0       	ldi	r25, 0x06	; 6
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x2a>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x34>
  b8:	00 00       	nop
		_delay_ms(2000);
		WDT_OFF();
  ba:	0e 94 36 00 	call	0x6c	; 0x6c <WDT_OFF>
  be:	ee cf       	rjmp	.-36     	; 0x9c <main+0x18>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
